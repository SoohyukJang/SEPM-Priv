{"ast":null,"code":"import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, query, where, getDocs } from 'firebase/firestore';\nimport { app } from '../firebase/config';\nconst API_KEY = '1c2cb4541bed45058be2c24ef6efe661';\nconst API_BASE_URL = 'https://api.spoonacular.com/recipes';\nconst db = getFirestore(app);\nexport const fetchRecipes = async filters => {\n  try {\n    const {\n      query,\n      cuisine,\n      diet,\n      intolerances,\n      maxReadyTime,\n      sort\n    } = filters;\n    let url = `${API_BASE_URL}/complexSearch?apiKey=${API_KEY}&number=20`;\n    if (query) url += `&query=${encodeURIComponent(query)}`;\n    if (cuisine) url += `&cuisine=${encodeURIComponent(cuisine)}`;\n    if (diet) url += `&diet=${encodeURIComponent(diet)}`;\n    if (intolerances && intolerances.length > 0) url += `&intolerances=${encodeURIComponent(intolerances.join(','))}`;\n    if (maxReadyTime) url += `&maxReadyTime=${maxReadyTime}`;\n    switch (sort) {\n      case 'popularity':\n        url += '&sort=popularity';\n        break;\n      case 'healthiness':\n        url += '&sort=healthiness';\n        break;\n      case 'time':\n        url += '&sort=time';\n        break;\n      default:\n        url += '&sort=popularity';\n    }\n\n    // Add additional information about recipes\n    url += '&addRecipeInformation=true&fillIngredients=true';\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching recipes:', error);\n    throw error;\n  }\n};\nexport const fetchRecipeById = async recipeId => {\n  try {\n    const url = `${API_BASE_URL}/${recipeId}/information?apiKey=${API_KEY}&includeNutrition=true`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching recipe with ID ${recipeId}:`, error);\n    throw error;\n  }\n};\nexport const saveRecipe = async (userId, recipe) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      // Create user document if it doesn't exist\n      await setDoc(userRef, {\n        savedRecipes: [recipe]\n      });\n    } else {\n      // Add recipe to existing savedRecipes array\n      await updateDoc(userRef, {\n        savedRecipes: arrayUnion(recipe)\n      });\n    }\n  } catch (error) {\n    console.error('Error saving recipe:', error);\n    throw error;\n  }\n};\nexport const removeRecipe = async (userId, recipeId) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      const savedRecipes = userDoc.data().savedRecipes || [];\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\n      if (recipeToRemove) {\n        await updateDoc(userRef, {\n          savedRecipes: arrayRemove(recipeToRemove)\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Error removing recipe:', error);\n    throw error;\n  }\n};\nexport const getSavedRecipes = async userId => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data().savedRecipes || [];\n    }\n    return [];\n  } catch (error) {\n    console.error('Error getting saved recipes:', error);\n    throw error;\n  }\n};\n\n// Add more API service functions as needed","map":{"version":3,"names":["getFirestore","collection","doc","getDoc","setDoc","updateDoc","arrayUnion","arrayRemove","query","where","getDocs","app","API_KEY","API_BASE_URL","db","fetchRecipes","filters","cuisine","diet","intolerances","maxReadyTime","sort","url","encodeURIComponent","length","join","response","fetch","ok","Error","status","data","json","results","error","console","fetchRecipeById","recipeId","saveRecipe","userId","recipe","userRef","userDoc","exists","savedRecipes","removeRecipe","recipeToRemove","find","id","getSavedRecipes"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, query, where, getDocs } from 'firebase/firestore';\r\nimport { app } from '../firebase/config';\r\n\r\nconst API_KEY = '1c2cb4541bed45058be2c24ef6efe661';\r\nconst API_BASE_URL = 'https://api.spoonacular.com/recipes';\r\n\r\nconst db = getFirestore(app);\r\n\r\nexport const fetchRecipes = async (filters) => {\r\n  try {\r\n    const { query, cuisine, diet, intolerances, maxReadyTime, sort } = filters;\r\n    \r\n    let url = `${API_BASE_URL}/complexSearch?apiKey=${API_KEY}&number=20`;\r\n    \r\n    if (query) url += `&query=${encodeURIComponent(query)}`;\r\n    if (cuisine) url += `&cuisine=${encodeURIComponent(cuisine)}`;\r\n    if (diet) url += `&diet=${encodeURIComponent(diet)}`;\r\n    if (intolerances && intolerances.length > 0) url += `&intolerances=${encodeURIComponent(intolerances.join(','))}`;\r\n    if (maxReadyTime) url += `&maxReadyTime=${maxReadyTime}`;\r\n    \r\n    switch (sort) {\r\n      case 'popularity':\r\n        url += '&sort=popularity';\r\n        break;\r\n      case 'healthiness':\r\n        url += '&sort=healthiness';\r\n        break;\r\n      case 'time':\r\n        url += '&sort=time';\r\n        break;\r\n      default:\r\n        url += '&sort=popularity';\r\n    }\r\n    \r\n    // Add additional information about recipes\r\n    url += '&addRecipeInformation=true&fillIngredients=true';\r\n    \r\n    const response = await fetch(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API request failed with status ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.results;\r\n  } catch (error) {\r\n    console.error('Error fetching recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecipeById = async (recipeId) => {\r\n  try {\r\n    const url = `${API_BASE_URL}/${recipeId}/information?apiKey=${API_KEY}&includeNutrition=true`;\r\n    const response = await fetch(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API request failed with status ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error fetching recipe with ID ${recipeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const saveRecipe = async (userId, recipe) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (!userDoc.exists()) {\r\n      // Create user document if it doesn't exist\r\n      await setDoc(userRef, {\r\n        savedRecipes: [recipe]\r\n      });\r\n    } else {\r\n      // Add recipe to existing savedRecipes array\r\n      await updateDoc(userRef, {\r\n        savedRecipes: arrayUnion(recipe)\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeRecipe = async (userId, recipeId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      const savedRecipes = userDoc.data().savedRecipes || [];\r\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\r\n      \r\n      if (recipeToRemove) {\r\n        await updateDoc(userRef, {\r\n          savedRecipes: arrayRemove(recipeToRemove)\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error removing recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSavedRecipes = async (userId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      return userDoc.data().savedRecipes || [];\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error getting saved recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add more API service functions as needed\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,WAAW,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,oBAAoB;AAC7I,SAASC,GAAG,QAAQ,oBAAoB;AAExC,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,YAAY,GAAG,qCAAqC;AAE1D,MAAMC,EAAE,GAAGd,YAAY,CAACW,GAAG,CAAC;AAE5B,OAAO,MAAMI,YAAY,GAAG,MAAOC,OAAO,IAAK;EAC7C,IAAI;IACF,MAAM;MAAER,KAAK;MAAES,OAAO;MAAEC,IAAI;MAAEC,YAAY;MAAEC,YAAY;MAAEC;IAAK,CAAC,GAAGL,OAAO;IAE1E,IAAIM,GAAG,GAAG,GAAGT,YAAY,yBAAyBD,OAAO,YAAY;IAErE,IAAIJ,KAAK,EAAEc,GAAG,IAAI,UAAUC,kBAAkB,CAACf,KAAK,CAAC,EAAE;IACvD,IAAIS,OAAO,EAAEK,GAAG,IAAI,YAAYC,kBAAkB,CAACN,OAAO,CAAC,EAAE;IAC7D,IAAIC,IAAI,EAAEI,GAAG,IAAI,SAASC,kBAAkB,CAACL,IAAI,CAAC,EAAE;IACpD,IAAIC,YAAY,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAEF,GAAG,IAAI,iBAAiBC,kBAAkB,CAACJ,YAAY,CAACM,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IACjH,IAAIL,YAAY,EAAEE,GAAG,IAAI,iBAAiBF,YAAY,EAAE;IAExD,QAAQC,IAAI;MACV,KAAK,YAAY;QACfC,GAAG,IAAI,kBAAkB;QACzB;MACF,KAAK,aAAa;QAChBA,GAAG,IAAI,mBAAmB;QAC1B;MACF,KAAK,MAAM;QACTA,GAAG,IAAI,YAAY;QACnB;MACF;QACEA,GAAG,IAAI,kBAAkB;IAC7B;;IAEA;IACAA,GAAG,IAAI,iDAAiD;IAExD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,CAAC;IAEjC,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkCH,QAAQ,CAACI,MAAM,EAAE,CAAC;IACtE;IAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO;EACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAOC,QAAQ,IAAK;EACjD,IAAI;IACF,MAAMf,GAAG,GAAG,GAAGT,YAAY,IAAIwB,QAAQ,uBAAuBzB,OAAO,wBAAwB;IAC7F,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,CAAC;IAEjC,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkCH,QAAQ,CAACI,MAAM,EAAE,CAAC;IACtE;IAEA,OAAO,MAAMJ,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiCG,QAAQ,GAAG,EAAEH,KAAK,CAAC;IAClE,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,MAAM,KAAK;EAClD,IAAI;IACF,MAAMC,OAAO,GAAGvC,GAAG,CAACY,EAAE,EAAE,OAAO,EAAEyB,MAAM,CAAC;IACxC,MAAMG,OAAO,GAAG,MAAMvC,MAAM,CAACsC,OAAO,CAAC;IAErC,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB;MACA,MAAMvC,MAAM,CAACqC,OAAO,EAAE;QACpBG,YAAY,EAAE,CAACJ,MAAM;MACvB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,MAAMnC,SAAS,CAACoC,OAAO,EAAE;QACvBG,YAAY,EAAEtC,UAAU,CAACkC,MAAM;MACjC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMW,YAAY,GAAG,MAAAA,CAAON,MAAM,EAAEF,QAAQ,KAAK;EACtD,IAAI;IACF,MAAMI,OAAO,GAAGvC,GAAG,CAACY,EAAE,EAAE,OAAO,EAAEyB,MAAM,CAAC;IACxC,MAAMG,OAAO,GAAG,MAAMvC,MAAM,CAACsC,OAAO,CAAC;IAErC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,MAAMC,YAAY,GAAGF,OAAO,CAACX,IAAI,CAAC,CAAC,CAACa,YAAY,IAAI,EAAE;MACtD,MAAME,cAAc,GAAGF,YAAY,CAACG,IAAI,CAACP,MAAM,IAAIA,MAAM,CAACQ,EAAE,KAAKX,QAAQ,CAAC;MAE1E,IAAIS,cAAc,EAAE;QAClB,MAAMzC,SAAS,CAACoC,OAAO,EAAE;UACvBG,YAAY,EAAErC,WAAW,CAACuC,cAAc;QAC1C,CAAC,CAAC;MACJ;IACF;EACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMe,eAAe,GAAG,MAAOV,MAAM,IAAK;EAC/C,IAAI;IACF,MAAME,OAAO,GAAGvC,GAAG,CAACY,EAAE,EAAE,OAAO,EAAEyB,MAAM,CAAC;IACxC,MAAMG,OAAO,GAAG,MAAMvC,MAAM,CAACsC,OAAO,CAAC;IAErC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,OAAOD,OAAO,CAACX,IAAI,CAAC,CAAC,CAACa,YAAY,IAAI,EAAE;IAC1C;IAEA,OAAO,EAAE;EACX,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}