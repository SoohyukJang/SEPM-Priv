{"ast":null,"code":"import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, query, where, getDocs } from 'firebase/firestore';\nimport { app } from '../firebase/config';\nconst API_KEY = 'eeb775beabdd459eb5f8e5983978fff1';\nconst db = getFirestore(app);\n\n// Sample data to use when API calls fail\nconst sampleRecipes = [{\n  id: 715538,\n  title: \"What to make for dinner tonight?? Bruschetta Style Pork & Pasta\",\n  image: \"https://img.spoonacular.com/recipes/715538-312x231.jpg\",\n  readyInMinutes: 45,\n  servings: 2,\n  vegetarian: true,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 716429,\n  title: \"Simple Skillet Lasagna\",\n  image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\n  readyInMinutes: 35,\n  servings: 4,\n  vegetarian: false,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 715497,\n  title: \"Berry Banana Breakfast Smoothie\",\n  image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\n  readyInMinutes: 5,\n  servings: 1,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}, {\n  id: 721146,\n  title: \"Homemade Strawberry Lemonade\",\n  image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\n  readyInMinutes: 15,\n  servings: 8,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}\n// More sample recipes...\n];\n\n// Filter sample recipes based on user filters\nconst filterSampleRecipes = filters => {\n  let filtered = [...sampleRecipes];\n  if (filters.query) {\n    const query = filters.query.toLowerCase();\n    filtered = filtered.filter(recipe => recipe.title.toLowerCase().includes(query));\n  }\n  if (filters.diet === 'vegetarian') {\n    filtered = filtered.filter(recipe => recipe.vegetarian);\n  } else if (filters.diet === 'vegan') {\n    filtered = filtered.filter(recipe => recipe.vegan);\n  } else if (filters.diet === 'gluten free') {\n    filtered = filtered.filter(recipe => recipe.glutenFree);\n  } else if (filters.diet === 'dairy free') {\n    filtered = filtered.filter(recipe => recipe.dairyFree);\n  }\n  if (filters.maxReadyTime) {\n    filtered = filtered.filter(recipe => recipe.readyInMinutes <= filters.maxReadyTime);\n  }\n  return filtered;\n};\nexport const fetchRecipes = async filters => {\n  try {\n    const {\n      query,\n      cuisine,\n      diet,\n      intolerances,\n      maxReadyTime,\n      sort\n    } = filters;\n\n    // Build the complete URL with all parameters\n    let apiUrl = \"https://api.spoonacular.com/recipes/complexSearch\";\n\n    // Create a URLSearchParams object to properly encode query parameters\n    const params = new URLSearchParams();\n    params.append(\"apiKey\", API_KEY);\n    params.append(\"number\", \"10\");\n    if (query) params.append(\"query\", query);\n    if (cuisine) params.append(\"cuisine\", cuisine);\n    if (diet) params.append(\"diet\", diet);\n    if (intolerances && intolerances.length > 0) params.append(\"intolerances\", intolerances.join(','));\n    if (maxReadyTime) params.append(\"maxReadyTime\", maxReadyTime);\n\n    // Add sort parameter\n    if (sort) params.append(\"sort\", sort);\n\n    // Add additional parameters for recipe information\n    params.append(\"addRecipeInformation\", \"true\");\n\n    // Construct the full URL\n    const fullUrl = apiUrl + \"?\" + params.toString();\n    console.log(\"Fetching recipes with URL:\", fullUrl);\n\n    // Use fetch with proper headers\n    const response = await fetch(fullUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n\n    // Check if the request was successful\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API request failed with status: \" + response.status);\n      console.error(\"Error response:\", errorText);\n      console.warn(\"Using offline sample data instead\");\n      return filterSampleRecipes(filters);\n    }\n\n    // Parse the JSON response\n    const data = await response.json();\n    console.log(\"API response received, results:\", data.results ? data.results.length : 0);\n    return data.results || [];\n  } catch (error) {\n    console.error('Error in fetchRecipes:', error);\n    console.warn('Using sample data for search');\n    return filterSampleRecipes(filters);\n  }\n};\n\n// Alias for fetchRecipes to maintain compatibility\nexport const searchRecipes = fetchRecipes;\nexport const fetchRecipeById = async recipeId => {\n  try {\n    const apiUrl = `https://api.spoonacular.com/recipes/${recipeId}/information`;\n    const params = new URLSearchParams();\n    params.append(\"apiKey\", API_KEY);\n    params.append(\"includeNutrition\", \"true\");\n    const fullUrl = apiUrl + \"?\" + params.toString();\n    console.log(\"Fetching recipe details:\", fullUrl);\n    const response = await fetch(fullUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API request failed:\", errorText);\n      // Try to find in sample data\n      const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\n      if (recipe) return recipe;\n      throw new Error(\"Recipe not found\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in fetchRecipeById:', error);\n    throw error;\n  }\n};\n\n// Alias for fetchRecipeById to maintain compatibility\nexport const getRecipeById = fetchRecipeById;\nexport const getSimilarRecipes = async recipeId => {\n  try {\n    const apiUrl = `https://api.spoonacular.com/recipes/${recipeId}/similar`;\n    const params = new URLSearchParams();\n    params.append(\"apiKey\", API_KEY);\n    params.append(\"number\", \"4\");\n    const fullUrl = apiUrl + \"?\" + params.toString();\n    console.log(\"Fetching similar recipes:\", fullUrl);\n    const response = await fetch(fullUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      console.warn(\"Failed to get similar recipes, using random sample data\");\n      const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n      return shuffled.slice(0, 4);\n    }\n    const similarRecipes = await response.json();\n\n    // Fetch details for each similar recipe\n    const detailedRecipes = await Promise.all(similarRecipes.map(recipe => fetchRecipeById(recipe.id)));\n    return detailedRecipes;\n  } catch (error) {\n    console.error('Error in getSimilarRecipes:', error);\n    // Return random sample recipes as fallback\n    const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, 4);\n  }\n};\nexport const getRecommendations = async userProfile => {\n  try {\n    // Default parameters if user profile is not available\n    let diet = '';\n    let intolerances = [];\n    let query = '';\n\n    // If user profile exists, use it to customize recommendations\n    if (userProfile) {\n      if (userProfile.goal === 'Weight Loss') {\n        diet = 'low-calorie';\n      } else if (userProfile.goal === 'Build Muscle') {\n        diet = 'high-protein';\n      }\n      intolerances = userProfile.allergies || [];\n    }\n\n    // Create filters object for fetching recipes\n    const filters = {\n      query,\n      diet,\n      intolerances,\n      sort: 'popularity',\n      maxReadyTime: 60\n    };\n    return await fetchRecipes(filters);\n  } catch (error) {\n    console.error('Error getting recommendations:', error);\n    return filterSampleRecipes({});\n  }\n};\nexport const saveRecipe = async (userId, recipe) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      // Create user document if it doesn't exist\n      await setDoc(userRef, {\n        savedRecipes: [recipe]\n      });\n    } else {\n      // Add recipe to existing savedRecipes array\n      await updateDoc(userRef, {\n        savedRecipes: arrayUnion(recipe)\n      });\n    }\n  } catch (error) {\n    console.error('Error saving recipe:', error);\n    throw error;\n  }\n};\nexport const removeRecipe = async (userId, recipeId) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      const savedRecipes = userDoc.data().savedRecipes || [];\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\n      if (recipeToRemove) {\n        await updateDoc(userRef, {\n          savedRecipes: arrayRemove(recipeToRemove)\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Error removing recipe:', error);\n    throw error;\n  }\n};\nexport const getSavedRecipes = async userId => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data().savedRecipes || [];\n    }\n    return [];\n  } catch (error) {\n    console.error('Error getting saved recipes:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getFirestore","collection","doc","getDoc","setDoc","updateDoc","arrayUnion","arrayRemove","query","where","getDocs","app","API_KEY","db","sampleRecipes","id","title","image","readyInMinutes","servings","vegetarian","vegan","glutenFree","dairyFree","filterSampleRecipes","filters","filtered","toLowerCase","filter","recipe","includes","diet","maxReadyTime","fetchRecipes","cuisine","intolerances","sort","apiUrl","params","URLSearchParams","append","length","join","fullUrl","toString","console","log","response","fetch","method","headers","ok","errorText","text","error","status","warn","data","json","results","searchRecipes","fetchRecipeById","recipeId","find","r","parseInt","Error","getRecipeById","getSimilarRecipes","shuffled","Math","random","slice","similarRecipes","detailedRecipes","Promise","all","map","getRecommendations","userProfile","goal","allergies","saveRecipe","userId","userRef","userDoc","exists","savedRecipes","removeRecipe","recipeToRemove","getSavedRecipes"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, query, where, getDocs } from 'firebase/firestore';\r\nimport { app } from '../firebase/config';\r\n\r\nconst API_KEY = 'eeb775beabdd459eb5f8e5983978fff1';\r\nconst db = getFirestore(app);\r\n\r\n// Sample data to use when API calls fail\r\nconst sampleRecipes = [\r\n  {\r\n    id: 715538,\r\n    title: \"What to make for dinner tonight?? Bruschetta Style Pork & Pasta\",\r\n    image: \"https://img.spoonacular.com/recipes/715538-312x231.jpg\",\r\n    readyInMinutes: 45,\r\n    servings: 2,\r\n    vegetarian: true,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 716429,\r\n    title: \"Simple Skillet Lasagna\",\r\n    image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\r\n    readyInMinutes: 35,\r\n    servings: 4,\r\n    vegetarian: false,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 715497,\r\n    title: \"Berry Banana Breakfast Smoothie\",\r\n    image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\r\n    readyInMinutes: 5,\r\n    servings: 1,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  {\r\n    id: 721146,\r\n    title: \"Homemade Strawberry Lemonade\",\r\n    image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\r\n    readyInMinutes: 15,\r\n    servings: 8,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  // More sample recipes...\r\n];\r\n\r\n// Filter sample recipes based on user filters\r\nconst filterSampleRecipes = (filters) => {\r\n  let filtered = [...sampleRecipes];\r\n  \r\n  if (filters.query) {\r\n    const query = filters.query.toLowerCase();\r\n    filtered = filtered.filter(recipe => \r\n      recipe.title.toLowerCase().includes(query)\r\n    );\r\n  }\r\n  \r\n  if (filters.diet === 'vegetarian') {\r\n    filtered = filtered.filter(recipe => recipe.vegetarian);\r\n  } else if (filters.diet === 'vegan') {\r\n    filtered = filtered.filter(recipe => recipe.vegan);\r\n  } else if (filters.diet === 'gluten free') {\r\n    filtered = filtered.filter(recipe => recipe.glutenFree);\r\n  } else if (filters.diet === 'dairy free') {\r\n    filtered = filtered.filter(recipe => recipe.dairyFree);\r\n  }\r\n  \r\n  if (filters.maxReadyTime) {\r\n    filtered = filtered.filter(recipe => recipe.readyInMinutes <= filters.maxReadyTime);\r\n  }\r\n  \r\n  return filtered;\r\n};\r\n\r\nexport const fetchRecipes = async (filters) => {\r\n  try {\r\n    const { query, cuisine, diet, intolerances, maxReadyTime, sort } = filters;\r\n    \r\n    // Build the complete URL with all parameters\r\n    let apiUrl = \"https://api.spoonacular.com/recipes/complexSearch\";\r\n    \r\n    // Create a URLSearchParams object to properly encode query parameters\r\n    const params = new URLSearchParams();\r\n    params.append(\"apiKey\", API_KEY);\r\n    params.append(\"number\", \"10\");\r\n    \r\n    if (query) params.append(\"query\", query);\r\n    if (cuisine) params.append(\"cuisine\", cuisine);\r\n    if (diet) params.append(\"diet\", diet);\r\n    if (intolerances && intolerances.length > 0) params.append(\"intolerances\", intolerances.join(','));\r\n    if (maxReadyTime) params.append(\"maxReadyTime\", maxReadyTime);\r\n    \r\n    // Add sort parameter\r\n    if (sort) params.append(\"sort\", sort);\r\n    \r\n    // Add additional parameters for recipe information\r\n    params.append(\"addRecipeInformation\", \"true\");\r\n    \r\n    // Construct the full URL\r\n    const fullUrl = apiUrl + \"?\" + params.toString();\r\n    console.log(\"Fetching recipes with URL:\", fullUrl);\r\n    \r\n    // Use fetch with proper headers\r\n    const response = await fetch(fullUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    \r\n    // Check if the request was successful\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error(\"API request failed with status: \" + response.status);\r\n      console.error(\"Error response:\", errorText);\r\n      console.warn(\"Using offline sample data instead\");\r\n      return filterSampleRecipes(filters);\r\n    }\r\n    \r\n    // Parse the JSON response\r\n    const data = await response.json();\r\n    console.log(\"API response received, results:\", data.results ? data.results.length : 0);\r\n    return data.results || [];\r\n  } catch (error) {\r\n    console.error('Error in fetchRecipes:', error);\r\n    console.warn('Using sample data for search');\r\n    return filterSampleRecipes(filters);\r\n  }\r\n};\r\n\r\n// Alias for fetchRecipes to maintain compatibility\r\nexport const searchRecipes = fetchRecipes;\r\n\r\nexport const fetchRecipeById = async (recipeId) => {\r\n  try {\r\n    const apiUrl = `https://api.spoonacular.com/recipes/${recipeId}/information`;\r\n    const params = new URLSearchParams();\r\n    params.append(\"apiKey\", API_KEY);\r\n    params.append(\"includeNutrition\", \"true\");\r\n    \r\n    const fullUrl = apiUrl + \"?\" + params.toString();\r\n    console.log(\"Fetching recipe details:\", fullUrl);\r\n    \r\n    const response = await fetch(fullUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error(\"API request failed:\", errorText);\r\n      // Try to find in sample data\r\n      const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\r\n      if (recipe) return recipe;\r\n      throw new Error(\"Recipe not found\");\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in fetchRecipeById:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Alias for fetchRecipeById to maintain compatibility\r\nexport const getRecipeById = fetchRecipeById;\r\n\r\nexport const getSimilarRecipes = async (recipeId) => {\r\n  try {\r\n    const apiUrl = `https://api.spoonacular.com/recipes/${recipeId}/similar`;\r\n    const params = new URLSearchParams();\r\n    params.append(\"apiKey\", API_KEY);\r\n    params.append(\"number\", \"4\");\r\n    \r\n    const fullUrl = apiUrl + \"?\" + params.toString();\r\n    console.log(\"Fetching similar recipes:\", fullUrl);\r\n    \r\n    const response = await fetch(fullUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      console.warn(\"Failed to get similar recipes, using random sample data\");\r\n      const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n      return shuffled.slice(0, 4);\r\n    }\r\n    \r\n    const similarRecipes = await response.json();\r\n    \r\n    // Fetch details for each similar recipe\r\n    const detailedRecipes = await Promise.all(\r\n      similarRecipes.map(recipe => fetchRecipeById(recipe.id))\r\n    );\r\n    \r\n    return detailedRecipes;\r\n  } catch (error) {\r\n    console.error('Error in getSimilarRecipes:', error);\r\n    // Return random sample recipes as fallback\r\n    const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, 4);\r\n  }\r\n};\r\n\r\nexport const getRecommendations = async (userProfile) => {\r\n  try {\r\n    // Default parameters if user profile is not available\r\n    let diet = '';\r\n    let intolerances = [];\r\n    let query = '';\r\n    \r\n    // If user profile exists, use it to customize recommendations\r\n    if (userProfile) {\r\n      if (userProfile.goal === 'Weight Loss') {\r\n        diet = 'low-calorie';\r\n      } else if (userProfile.goal === 'Build Muscle') {\r\n        diet = 'high-protein';\r\n      }\r\n      \r\n      intolerances = userProfile.allergies || [];\r\n    }\r\n    \r\n    // Create filters object for fetching recipes\r\n    const filters = {\r\n      query,\r\n      diet,\r\n      intolerances,\r\n      sort: 'popularity',\r\n      maxReadyTime: 60\r\n    };\r\n    \r\n    return await fetchRecipes(filters);\r\n  } catch (error) {\r\n    console.error('Error getting recommendations:', error);\r\n    return filterSampleRecipes({});\r\n  }\r\n};\r\n\r\nexport const saveRecipe = async (userId, recipe) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (!userDoc.exists()) {\r\n      // Create user document if it doesn't exist\r\n      await setDoc(userRef, {\r\n        savedRecipes: [recipe]\r\n      });\r\n    } else {\r\n      // Add recipe to existing savedRecipes array\r\n      await updateDoc(userRef, {\r\n        savedRecipes: arrayUnion(recipe)\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeRecipe = async (userId, recipeId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      const savedRecipes = userDoc.data().savedRecipes || [];\r\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\r\n      \r\n      if (recipeToRemove) {\r\n        await updateDoc(userRef, {\r\n          savedRecipes: arrayRemove(recipeToRemove)\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error removing recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSavedRecipes = async (userId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      return userDoc.data().savedRecipes || [];\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error getting saved recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,WAAW,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,oBAAoB;AAC7I,SAASC,GAAG,QAAQ,oBAAoB;AAExC,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,EAAE,GAAGb,YAAY,CAACW,GAAG,CAAC;;AAE5B;AACA,MAAMG,aAAa,GAAG,CACpB;EACEC,EAAE,EAAE,MAAM;EACVC,KAAK,EAAE,iEAAiE;EACxEC,KAAK,EAAE,wDAAwD;EAC/DC,cAAc,EAAE,EAAE;EAClBC,QAAQ,EAAE,CAAC;EACXC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE,KAAK;EACZC,UAAU,EAAE,KAAK;EACjBC,SAAS,EAAE;AACb,CAAC,EACD;EACER,EAAE,EAAE,MAAM;EACVC,KAAK,EAAE,wBAAwB;EAC/BC,KAAK,EAAE,yDAAyD;EAChEC,cAAc,EAAE,EAAE;EAClBC,QAAQ,EAAE,CAAC;EACXC,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAE,KAAK;EACZC,UAAU,EAAE,KAAK;EACjBC,SAAS,EAAE;AACb,CAAC,EACD;EACER,EAAE,EAAE,MAAM;EACVC,KAAK,EAAE,iCAAiC;EACxCC,KAAK,EAAE,yDAAyD;EAChEC,cAAc,EAAE,CAAC;EACjBC,QAAQ,EAAE,CAAC;EACXC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE,IAAI;EAChBC,SAAS,EAAE;AACb,CAAC,EACD;EACER,EAAE,EAAE,MAAM;EACVC,KAAK,EAAE,8BAA8B;EACrCC,KAAK,EAAE,yDAAyD;EAChEC,cAAc,EAAE,EAAE;EAClBC,QAAQ,EAAE,CAAC;EACXC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE,IAAI;EAChBC,SAAS,EAAE;AACb;AACA;AAAA,CACD;;AAED;AACA,MAAMC,mBAAmB,GAAIC,OAAO,IAAK;EACvC,IAAIC,QAAQ,GAAG,CAAC,GAAGZ,aAAa,CAAC;EAEjC,IAAIW,OAAO,CAACjB,KAAK,EAAE;IACjB,MAAMA,KAAK,GAAGiB,OAAO,CAACjB,KAAK,CAACmB,WAAW,CAAC,CAAC;IACzCD,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,MAAM,IAC/BA,MAAM,CAACb,KAAK,CAACW,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACtB,KAAK,CAC3C,CAAC;EACH;EAEA,IAAIiB,OAAO,CAACM,IAAI,KAAK,YAAY,EAAE;IACjCL,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACT,UAAU,CAAC;EACzD,CAAC,MAAM,IAAIK,OAAO,CAACM,IAAI,KAAK,OAAO,EAAE;IACnCL,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACR,KAAK,CAAC;EACpD,CAAC,MAAM,IAAII,OAAO,CAACM,IAAI,KAAK,aAAa,EAAE;IACzCL,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACP,UAAU,CAAC;EACzD,CAAC,MAAM,IAAIG,OAAO,CAACM,IAAI,KAAK,YAAY,EAAE;IACxCL,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACN,SAAS,CAAC;EACxD;EAEA,IAAIE,OAAO,CAACO,YAAY,EAAE;IACxBN,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACX,cAAc,IAAIO,OAAO,CAACO,YAAY,CAAC;EACrF;EAEA,OAAON,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMO,YAAY,GAAG,MAAOR,OAAO,IAAK;EAC7C,IAAI;IACF,MAAM;MAAEjB,KAAK;MAAE0B,OAAO;MAAEH,IAAI;MAAEI,YAAY;MAAEH,YAAY;MAAEI;IAAK,CAAC,GAAGX,OAAO;;IAE1E;IACA,IAAIY,MAAM,GAAG,mDAAmD;;IAEhE;IACA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE5B,OAAO,CAAC;IAChC0B,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;IAE7B,IAAIhC,KAAK,EAAE8B,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEhC,KAAK,CAAC;IACxC,IAAI0B,OAAO,EAAEI,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEN,OAAO,CAAC;IAC9C,IAAIH,IAAI,EAAEO,MAAM,CAACE,MAAM,CAAC,MAAM,EAAET,IAAI,CAAC;IACrC,IAAII,YAAY,IAAIA,YAAY,CAACM,MAAM,GAAG,CAAC,EAAEH,MAAM,CAACE,MAAM,CAAC,cAAc,EAAEL,YAAY,CAACO,IAAI,CAAC,GAAG,CAAC,CAAC;IAClG,IAAIV,YAAY,EAAEM,MAAM,CAACE,MAAM,CAAC,cAAc,EAAER,YAAY,CAAC;;IAE7D;IACA,IAAII,IAAI,EAAEE,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;;IAErC;IACAE,MAAM,CAACE,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC;;IAE7C;IACA,MAAMG,OAAO,GAAGN,MAAM,GAAG,GAAG,GAAGC,MAAM,CAACM,QAAQ,CAAC,CAAC;IAChDC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,OAAO,CAAC;;IAElD;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;MACpCM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvCR,OAAO,CAACS,KAAK,CAAC,kCAAkC,GAAGP,QAAQ,CAACQ,MAAM,CAAC;MACnEV,OAAO,CAACS,KAAK,CAAC,iBAAiB,EAAEF,SAAS,CAAC;MAC3CP,OAAO,CAACW,IAAI,CAAC,mCAAmC,CAAC;MACjD,OAAOhC,mBAAmB,CAACC,OAAO,CAAC;IACrC;;IAEA;IACA,MAAMgC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClCb,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEW,IAAI,CAACE,OAAO,GAAGF,IAAI,CAACE,OAAO,CAAClB,MAAM,GAAG,CAAC,CAAC;IACtF,OAAOgB,IAAI,CAACE,OAAO,IAAI,EAAE;EAC3B,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CT,OAAO,CAACW,IAAI,CAAC,8BAA8B,CAAC;IAC5C,OAAOhC,mBAAmB,CAACC,OAAO,CAAC;EACrC;AACF,CAAC;;AAED;AACA,OAAO,MAAMmC,aAAa,GAAG3B,YAAY;AAEzC,OAAO,MAAM4B,eAAe,GAAG,MAAOC,QAAQ,IAAK;EACjD,IAAI;IACF,MAAMzB,MAAM,GAAG,uCAAuCyB,QAAQ,cAAc;IAC5E,MAAMxB,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE5B,OAAO,CAAC;IAChC0B,MAAM,CAACE,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC;IAEzC,MAAMG,OAAO,GAAGN,MAAM,GAAG,GAAG,GAAGC,MAAM,CAACM,QAAQ,CAAC,CAAC;IAChDC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,OAAO,CAAC;IAEhD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;MACpCM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvCR,OAAO,CAACS,KAAK,CAAC,qBAAqB,EAAEF,SAAS,CAAC;MAC/C;MACA,MAAMvB,MAAM,GAAGf,aAAa,CAACiD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjD,EAAE,KAAKkD,QAAQ,CAACH,QAAQ,CAAC,CAAC;MACnE,IAAIjC,MAAM,EAAE,OAAOA,MAAM;MACzB,MAAM,IAAIqC,KAAK,CAAC,kBAAkB,CAAC;IACrC;IAEA,OAAO,MAAMnB,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,aAAa,GAAGN,eAAe;AAE5C,OAAO,MAAMO,iBAAiB,GAAG,MAAON,QAAQ,IAAK;EACnD,IAAI;IACF,MAAMzB,MAAM,GAAG,uCAAuCyB,QAAQ,UAAU;IACxE,MAAMxB,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE5B,OAAO,CAAC;IAChC0B,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC;IAE5B,MAAMG,OAAO,GAAGN,MAAM,GAAG,GAAG,GAAGC,MAAM,CAACM,QAAQ,CAAC,CAAC;IAChDC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,OAAO,CAAC;IAEjD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;MACpCM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChBN,OAAO,CAACW,IAAI,CAAC,yDAAyD,CAAC;MACvE,MAAMa,QAAQ,GAAG,CAAC,GAAGvD,aAAa,CAAC,CAACsB,IAAI,CAAC,MAAM,GAAG,GAAGkC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;MACnE,OAAOF,QAAQ,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7B;IAEA,MAAMC,cAAc,GAAG,MAAM1B,QAAQ,CAACW,IAAI,CAAC,CAAC;;IAE5C;IACA,MAAMgB,eAAe,GAAG,MAAMC,OAAO,CAACC,GAAG,CACvCH,cAAc,CAACI,GAAG,CAAChD,MAAM,IAAIgC,eAAe,CAAChC,MAAM,CAACd,EAAE,CAAC,CACzD,CAAC;IAED,OAAO2D,eAAe;EACxB,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD;IACA,MAAMe,QAAQ,GAAG,CAAC,GAAGvD,aAAa,CAAC,CAACsB,IAAI,CAAC,MAAM,GAAG,GAAGkC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IACnE,OAAOF,QAAQ,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAG,MAAOC,WAAW,IAAK;EACvD,IAAI;IACF;IACA,IAAIhD,IAAI,GAAG,EAAE;IACb,IAAII,YAAY,GAAG,EAAE;IACrB,IAAI3B,KAAK,GAAG,EAAE;;IAEd;IACA,IAAIuE,WAAW,EAAE;MACf,IAAIA,WAAW,CAACC,IAAI,KAAK,aAAa,EAAE;QACtCjD,IAAI,GAAG,aAAa;MACtB,CAAC,MAAM,IAAIgD,WAAW,CAACC,IAAI,KAAK,cAAc,EAAE;QAC9CjD,IAAI,GAAG,cAAc;MACvB;MAEAI,YAAY,GAAG4C,WAAW,CAACE,SAAS,IAAI,EAAE;IAC5C;;IAEA;IACA,MAAMxD,OAAO,GAAG;MACdjB,KAAK;MACLuB,IAAI;MACJI,YAAY;MACZC,IAAI,EAAE,YAAY;MAClBJ,YAAY,EAAE;IAChB,CAAC;IAED,OAAO,MAAMC,YAAY,CAACR,OAAO,CAAC;EACpC,CAAC,CAAC,OAAO6B,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO9B,mBAAmB,CAAC,CAAC,CAAC,CAAC;EAChC;AACF,CAAC;AAED,OAAO,MAAM0D,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEtD,MAAM,KAAK;EAClD,IAAI;IACF,MAAMuD,OAAO,GAAGlF,GAAG,CAACW,EAAE,EAAE,OAAO,EAAEsE,MAAM,CAAC;IACxC,MAAME,OAAO,GAAG,MAAMlF,MAAM,CAACiF,OAAO,CAAC;IAErC,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB;MACA,MAAMlF,MAAM,CAACgF,OAAO,EAAE;QACpBG,YAAY,EAAE,CAAC1D,MAAM;MACvB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,MAAMxB,SAAS,CAAC+E,OAAO,EAAE;QACvBG,YAAY,EAAEjF,UAAU,CAACuB,MAAM;MACjC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOyB,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMkC,YAAY,GAAG,MAAAA,CAAOL,MAAM,EAAErB,QAAQ,KAAK;EACtD,IAAI;IACF,MAAMsB,OAAO,GAAGlF,GAAG,CAACW,EAAE,EAAE,OAAO,EAAEsE,MAAM,CAAC;IACxC,MAAME,OAAO,GAAG,MAAMlF,MAAM,CAACiF,OAAO,CAAC;IAErC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,MAAMC,YAAY,GAAGF,OAAO,CAAC5B,IAAI,CAAC,CAAC,CAAC8B,YAAY,IAAI,EAAE;MACtD,MAAME,cAAc,GAAGF,YAAY,CAACxB,IAAI,CAAClC,MAAM,IAAIA,MAAM,CAACd,EAAE,KAAK+C,QAAQ,CAAC;MAE1E,IAAI2B,cAAc,EAAE;QAClB,MAAMpF,SAAS,CAAC+E,OAAO,EAAE;UACvBG,YAAY,EAAEhF,WAAW,CAACkF,cAAc;QAC1C,CAAC,CAAC;MACJ;IACF;EACF,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMoC,eAAe,GAAG,MAAOP,MAAM,IAAK;EAC/C,IAAI;IACF,MAAMC,OAAO,GAAGlF,GAAG,CAACW,EAAE,EAAE,OAAO,EAAEsE,MAAM,CAAC;IACxC,MAAME,OAAO,GAAG,MAAMlF,MAAM,CAACiF,OAAO,CAAC;IAErC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,OAAOD,OAAO,CAAC5B,IAAI,CAAC,CAAC,CAAC8B,YAAY,IAAI,EAAE;IAC1C;IAEA,OAAO,EAAE;EACX,CAAC,CAAC,OAAOjC,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}