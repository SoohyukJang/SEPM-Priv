{"ast":null,"code":"import { getFirestore, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';\nimport { app } from '../firebase/config';\nconst API_KEY = 'eeb775beabdd459eb5f8e5983978fff1';\nconst db = getFirestore(app);\n\n// Sample data to use when API calls fail\nconst sampleRecipes = [{\n  id: 715538,\n  title: \"What to make for dinner tonight?? Bruschetta Style Pork & Pasta\",\n  image: \"https://img.spoonacular.com/recipes/715538-312x231.jpg\",\n  readyInMinutes: 45,\n  servings: 2,\n  vegetarian: true,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 716429,\n  title: \"Simple Skillet Lasagna\",\n  image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\n  readyInMinutes: 35,\n  servings: 4,\n  vegetarian: false,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 715497,\n  title: \"Berry Banana Breakfast Smoothie\",\n  image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\n  readyInMinutes: 5,\n  servings: 1,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}, {\n  id: 721146,\n  title: \"Homemade Strawberry Lemonade\",\n  image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\n  readyInMinutes: 15,\n  servings: 8,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}\n// More sample recipes...\n];\n\n// Filter sample recipes based on user filters\nconst filterSampleRecipes = filters => {\n  let filtered = [...sampleRecipes];\n  if (filters.query) {\n    const query = filters.query.toLowerCase();\n    filtered = filtered.filter(recipe => recipe.title.toLowerCase().includes(query));\n  }\n  if (filters.diet === 'vegetarian') {\n    filtered = filtered.filter(recipe => recipe.vegetarian);\n  } else if (filters.diet === 'vegan') {\n    filtered = filtered.filter(recipe => recipe.vegan);\n  } else if (filters.diet === 'gluten free') {\n    filtered = filtered.filter(recipe => recipe.glutenFree);\n  } else if (filters.diet === 'dairy free') {\n    filtered = filtered.filter(recipe => recipe.dairyFree);\n  }\n  if (filters.maxReadyTime) {\n    filtered = filtered.filter(recipe => recipe.readyInMinutes <= filters.maxReadyTime);\n  }\n  return filtered;\n};\nexport const fetchRecipes = async filters => {\n  try {\n    // Always use sample data for development\n    console.log(\"Using sample data for search (API calls disabled)\");\n    return filterSampleRecipes(filters);\n\n    /* \r\n    // Code below is commented out due to API endpoint issues\r\n    // Will be enabled once the endpoint issues are resolved\r\n    \r\n    const { query, cuisine, diet, intolerances, maxReadyTime, sort } = filters;\r\n    \r\n    // Basic URL construction\r\n    const baseUrl = \"https://api.spoonacular.com/recipes/complexSearch\";\r\n    let url = baseUrl + \"?apiKey=\" + API_KEY + \"&number=10\";\r\n    \r\n    if (query) url += \"&query=\" + encodeURIComponent(query);\r\n    \r\n    console.log(\"API URL (not currently used):\", url);\r\n    \r\n    // API call is currently disabled\r\n    const response = await fetch(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(\"API request failed with status: \" + response.status);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.results || [];\r\n    */\n  } catch (error) {\n    console.error(\"Error in fetchRecipes:\", error);\n    return filterSampleRecipes(filters);\n  }\n};\nexport const searchRecipes = fetchRecipes;\nexport const fetchRecipeById = async recipeId => {\n  console.log(\"Using sample data for recipe details (API calls disabled)\");\n\n  // Find recipe in sample data\n  const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\n  if (recipe) {\n    return recipe;\n  }\n  throw new Error(\"Recipe not found in sample data\");\n};\nexport const getRecipeById = fetchRecipeById;\nexport const getSimilarRecipes = async recipeId => {\n  console.log(\"Using sample data for similar recipes (API calls disabled)\");\n\n  // Return random recipes from sample data\n  const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, 4);\n};\nexport const getRecommendations = async userProfile => {\n  try {\n    // Default parameters if user profile is not available\n    let diet = '';\n    let intolerances = [];\n    let query = '';\n\n    // If user profile exists, use it to customize recommendations\n    if (userProfile) {\n      if (userProfile.goal === 'Weight Loss') {\n        diet = 'low-calorie';\n      } else if (userProfile.goal === 'Build Muscle') {\n        diet = 'high-protein';\n      }\n      intolerances = userProfile.allergies || [];\n    }\n\n    // Create filters object for fetching recipes\n    const filters = {\n      query,\n      diet,\n      intolerances,\n      sort: 'popularity',\n      maxReadyTime: 60\n    };\n    return await fetchRecipes(filters);\n  } catch (error) {\n    console.error('Error getting recommendations:', error);\n    return filterSampleRecipes({});\n  }\n};\nexport const saveRecipe = async (userId, recipe) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      // Create user document if it doesn't exist\n      await setDoc(userRef, {\n        savedRecipes: [recipe]\n      });\n    } else {\n      // Add recipe to existing savedRecipes array\n      await updateDoc(userRef, {\n        savedRecipes: arrayUnion(recipe)\n      });\n    }\n  } catch (error) {\n    console.error('Error saving recipe:', error);\n    throw error;\n  }\n};\nexport const removeRecipe = async (userId, recipeId) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      const savedRecipes = userDoc.data().savedRecipes || [];\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\n      if (recipeToRemove) {\n        await updateDoc(userRef, {\n          savedRecipes: arrayRemove(recipeToRemove)\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Error removing recipe:', error);\n    throw error;\n  }\n};\nexport const getSavedRecipes = async userId => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data().savedRecipes || [];\n    }\n    return [];\n  } catch (error) {\n    console.error('Error getting saved recipes:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getFirestore","doc","getDoc","setDoc","updateDoc","arrayUnion","arrayRemove","app","API_KEY","db","sampleRecipes","id","title","image","readyInMinutes","servings","vegetarian","vegan","glutenFree","dairyFree","filterSampleRecipes","filters","filtered","query","toLowerCase","filter","recipe","includes","diet","maxReadyTime","fetchRecipes","console","log","error","searchRecipes","fetchRecipeById","recipeId","find","r","parseInt","Error","getRecipeById","getSimilarRecipes","shuffled","sort","Math","random","slice","getRecommendations","userProfile","intolerances","goal","allergies","saveRecipe","userId","userRef","userDoc","exists","savedRecipes","removeRecipe","data","recipeToRemove","getSavedRecipes"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["import { getFirestore, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove} from 'firebase/firestore';\r\nimport { app } from '../firebase/config';\r\n\r\nconst API_KEY = 'eeb775beabdd459eb5f8e5983978fff1';\r\nconst db = getFirestore(app);\r\n\r\n// Sample data to use when API calls fail\r\nconst sampleRecipes = [\r\n  {\r\n    id: 715538,\r\n    title: \"What to make for dinner tonight?? Bruschetta Style Pork & Pasta\",\r\n    image: \"https://img.spoonacular.com/recipes/715538-312x231.jpg\",\r\n    readyInMinutes: 45,\r\n    servings: 2,\r\n    vegetarian: true,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 716429,\r\n    title: \"Simple Skillet Lasagna\",\r\n    image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\r\n    readyInMinutes: 35,\r\n    servings: 4,\r\n    vegetarian: false,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 715497,\r\n    title: \"Berry Banana Breakfast Smoothie\",\r\n    image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\r\n    readyInMinutes: 5,\r\n    servings: 1,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  {\r\n    id: 721146,\r\n    title: \"Homemade Strawberry Lemonade\",\r\n    image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\r\n    readyInMinutes: 15,\r\n    servings: 8,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  // More sample recipes...\r\n];\r\n\r\n// Filter sample recipes based on user filters\r\nconst filterSampleRecipes = (filters) => {\r\n  let filtered = [...sampleRecipes];\r\n  \r\n  if (filters.query) {\r\n    const query = filters.query.toLowerCase();\r\n    filtered = filtered.filter(recipe => \r\n      recipe.title.toLowerCase().includes(query)\r\n    );\r\n  }\r\n  \r\n  if (filters.diet === 'vegetarian') {\r\n    filtered = filtered.filter(recipe => recipe.vegetarian);\r\n  } else if (filters.diet === 'vegan') {\r\n    filtered = filtered.filter(recipe => recipe.vegan);\r\n  } else if (filters.diet === 'gluten free') {\r\n    filtered = filtered.filter(recipe => recipe.glutenFree);\r\n  } else if (filters.diet === 'dairy free') {\r\n    filtered = filtered.filter(recipe => recipe.dairyFree);\r\n  }\r\n  \r\n  if (filters.maxReadyTime) {\r\n    filtered = filtered.filter(recipe => recipe.readyInMinutes <= filters.maxReadyTime);\r\n  }\r\n  \r\n  return filtered;\r\n};\r\n\r\nexport const fetchRecipes = async (filters) => {\r\n  try {\r\n    // Always use sample data for development\r\n    console.log(\"Using sample data for search (API calls disabled)\");\r\n    return filterSampleRecipes(filters);\r\n    \r\n    /* \r\n    // Code below is commented out due to API endpoint issues\r\n    // Will be enabled once the endpoint issues are resolved\r\n    \r\n    const { query, cuisine, diet, intolerances, maxReadyTime, sort } = filters;\r\n    \r\n    // Basic URL construction\r\n    const baseUrl = \"https://api.spoonacular.com/recipes/complexSearch\";\r\n    let url = baseUrl + \"?apiKey=\" + API_KEY + \"&number=10\";\r\n    \r\n    if (query) url += \"&query=\" + encodeURIComponent(query);\r\n    \r\n    console.log(\"API URL (not currently used):\", url);\r\n    \r\n    // API call is currently disabled\r\n    const response = await fetch(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(\"API request failed with status: \" + response.status);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.results || [];\r\n    */\r\n  } catch (error) {\r\n    console.error(\"Error in fetchRecipes:\", error);\r\n    return filterSampleRecipes(filters);\r\n  }\r\n};\r\n\r\nexport const searchRecipes = fetchRecipes;\r\n\r\nexport const fetchRecipeById = async (recipeId) => {\r\n  console.log(\"Using sample data for recipe details (API calls disabled)\");\r\n  \r\n  // Find recipe in sample data\r\n  const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\r\n  \r\n  if (recipe) {\r\n    return recipe;\r\n  }\r\n  \r\n  throw new Error(\"Recipe not found in sample data\");\r\n};\r\n\r\nexport const getRecipeById = fetchRecipeById;\r\n\r\nexport const getSimilarRecipes = async (recipeId) => {\r\n  console.log(\"Using sample data for similar recipes (API calls disabled)\");\r\n  \r\n  // Return random recipes from sample data\r\n  const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n  return shuffled.slice(0, 4);\r\n};\r\n\r\nexport const getRecommendations = async (userProfile) => {\r\n  try {\r\n    // Default parameters if user profile is not available\r\n    let diet = '';\r\n    let intolerances = [];\r\n    let query = '';\r\n    \r\n    // If user profile exists, use it to customize recommendations\r\n    if (userProfile) {\r\n      if (userProfile.goal === 'Weight Loss') {\r\n        diet = 'low-calorie';\r\n      } else if (userProfile.goal === 'Build Muscle') {\r\n        diet = 'high-protein';\r\n      }\r\n      \r\n      intolerances = userProfile.allergies || [];\r\n    }\r\n    \r\n    // Create filters object for fetching recipes\r\n    const filters = {\r\n      query,\r\n      diet,\r\n      intolerances,\r\n      sort: 'popularity',\r\n      maxReadyTime: 60\r\n    };\r\n    \r\n    return await fetchRecipes(filters);\r\n  } catch (error) {\r\n    console.error('Error getting recommendations:', error);\r\n    return filterSampleRecipes({});\r\n  }\r\n};\r\n\r\nexport const saveRecipe = async (userId, recipe) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (!userDoc.exists()) {\r\n      // Create user document if it doesn't exist\r\n      await setDoc(userRef, {\r\n        savedRecipes: [recipe]\r\n      });\r\n    } else {\r\n      // Add recipe to existing savedRecipes array\r\n      await updateDoc(userRef, {\r\n        savedRecipes: arrayUnion(recipe)\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeRecipe = async (userId, recipeId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      const savedRecipes = userDoc.data().savedRecipes || [];\r\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\r\n      \r\n      if (recipeToRemove) {\r\n        await updateDoc(userRef, {\r\n          savedRecipes: arrayRemove(recipeToRemove)\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error removing recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSavedRecipes = async (userId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      return userDoc.data().savedRecipes || [];\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error getting saved recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}