{"ast":null,"code":"import axios from 'axios';\nimport sampleRecipes from '../data/sample-recipes.json';\n\n// API 키\nconst API_KEY = '1c2cb4541bed45058be2c24ef6efe661';\nconst BASE_URL = 'https://api.spoonacular.com/recipes';\n\n// 로컬 스토리지 키\nconst CACHE_KEYS = {\n  POPULAR_RECIPES: 'nutrigen_popular_recipes',\n  QUICK_RECIPES: 'nutrigen_quick_recipes',\n  RECIPE_DETAILS: 'nutrigen_recipe_details_',\n  SEARCH_RESULTS: 'nutrigen_search_results_',\n  SIMILAR_RECIPES: 'nutrigen_similar_recipes_',\n  CACHE_TIMESTAMP: '_timestamp',\n  CACHE_EXPIRY: 60 * 60 * 1000 // 1시간 캐시 유효시간 (밀리초)\n};\n\n// 캐시 관리 함수\nconst cacheManager = {\n  // 캐시 저장\n  setCache(key, data) {\n    const cacheData = {\n      data,\n      timestamp: Date.now()\n    };\n    try {\n      localStorage.setItem(key, JSON.stringify(cacheData));\n      return true;\n    } catch (error) {\n      console.error('Cache storage error:', error);\n      return false;\n    }\n  },\n  // 캐시 조회\n  getCache(key) {\n    try {\n      const cacheData = localStorage.getItem(key);\n      if (!cacheData) return null;\n      const {\n        data,\n        timestamp\n      } = JSON.parse(cacheData);\n      // 캐시 유효시간 확인\n      if (Date.now() - timestamp > CACHE_KEYS.CACHE_EXPIRY) {\n        localStorage.removeItem(key);\n        return null;\n      }\n      return data;\n    } catch (error) {\n      console.error('Cache retrieval error:', error);\n      return null;\n    }\n  },\n  // 캐시 삭제\n  clearCache(key) {\n    try {\n      localStorage.removeItem(key);\n      return true;\n    } catch (error) {\n      console.error('Cache removal error:', error);\n      return false;\n    }\n  }\n};\n\n// API 요청 함수 (오프라인 대비 및 캐싱 포함)\nconst apiRequest = async (endpoint, params = {}) => {\n  // 캐시 키 생성\n  const queryString = new URLSearchParams({\n    ...params,\n    apiKey: API_KEY\n  }).toString();\n  const cacheKey = endpoint.replace(/\\//g, '_') + '_' + queryString;\n\n  // 캐시 확인\n  const cachedData = cacheManager.getCache(cacheKey);\n  if (cachedData) {\n    console.log('Using cached data for:', endpoint);\n    return cachedData;\n  }\n  try {\n    const response = await axios.get(`${BASE_URL}${endpoint}`, {\n      params: {\n        ...params,\n        apiKey: API_KEY\n      }\n    });\n\n    // 응답 캐싱\n    cacheManager.setCache(cacheKey, response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API request failed:', error);\n\n    // API 호출 실패 시 오프라인 데이터 사용\n    if (endpoint.includes('complexSearch')) {\n      console.log('Using offline data for search');\n      return {\n        results: sampleRecipes,\n        offset: 0,\n        number: sampleRecipes.length,\n        totalResults: sampleRecipes.length\n      };\n    } else if (endpoint.match(/^\\/\\d+\\/information/)) {\n      // 레시피 상세 정보 요청의 경우\n      const recipeId = endpoint.split('/')[1];\n      const offlineRecipe = sampleRecipes.find(recipe => recipe.id.toString() === recipeId);\n      if (offlineRecipe) {\n        console.log('Using offline data for recipe detail');\n        return offlineRecipe;\n      }\n    } else if (endpoint.match(/^\\/\\d+\\/similar/)) {\n      // 유사 레시피 요청의 경우\n      console.log('Using offline data for similar recipes');\n      // 무작위로 다른 샘플 레시피 2개 선택\n      const shuffled = [...sampleRecipes].filter(recipe => recipe.id.toString() !== endpoint.split('/')[1]).sort(() => 0.5 - Math.random());\n      return shuffled.slice(0, 3);\n    }\n\n    // 기타 경우 빈 결과 반환\n    return {\n      results: []\n    };\n  }\n};\n\n// 검색 함수\nexport const searchRecipes = async (query, options = {}) => {\n  const cacheKey = CACHE_KEYS.SEARCH_RESULTS + query + JSON.stringify(options);\n  const cachedData = cacheManager.getCache(cacheKey);\n  if (cachedData) {\n    return cachedData;\n  }\n  try {\n    const results = await apiRequest('/complexSearch', {\n      query,\n      addRecipeInformation: true,\n      fillIngredients: true,\n      ...options\n    });\n    cacheManager.setCache(cacheKey, results);\n    return results;\n  } catch (error) {\n    console.error('Search failed:', error);\n\n    // 오프라인 데이터 필터링\n    let filteredRecipes = [...sampleRecipes];\n\n    // 검색어 필터링\n    if (query) {\n      filteredRecipes = filteredRecipes.filter(recipe => recipe.title.toLowerCase().includes(query.toLowerCase()));\n    }\n\n    // 추가 필터링 (시간, 다이어트 등)\n    if (options.maxReadyTime) {\n      filteredRecipes = filteredRecipes.filter(recipe => recipe.readyInMinutes <= options.maxReadyTime);\n    }\n    if (options.diet) {\n      filteredRecipes = filteredRecipes.filter(recipe => recipe.diets && recipe.diets.includes(options.diet));\n    }\n\n    // 정렬\n    if (options.sort) {\n      switch (options.sort) {\n        case 'popularity':\n          filteredRecipes.sort((a, b) => b.spoonacularScore - a.spoonacularScore);\n          break;\n        case 'time':\n          filteredRecipes.sort((a, b) => a.readyInMinutes - b.readyInMinutes);\n          break;\n        case 'healthiness':\n          filteredRecipes.sort((a, b) => b.healthScore - a.healthScore);\n          break;\n      }\n    }\n\n    // 결과 개수 제한\n    if (options.number) {\n      filteredRecipes = filteredRecipes.slice(0, options.number);\n    }\n    return {\n      results: filteredRecipes,\n      offset: 0,\n      number: filteredRecipes.length,\n      totalResults: filteredRecipes.length\n    };\n  }\n};\n\n// getRecipeDetails와 getRecipeById는 동일한 기능 (이름만 다름)\nexport const getRecipeDetails = async id => {\n  const cacheKey = CACHE_KEYS.RECIPE_DETAILS + id;\n  const cachedData = cacheManager.getCache(cacheKey);\n  if (cachedData) {\n    return cachedData;\n  }\n  try {\n    const result = await apiRequest(`/${id}/information`, {\n      includeNutrition: true\n    });\n    cacheManager.setCache(cacheKey, result);\n    return result;\n  } catch (error) {\n    console.error(`Failed to get recipe details for ID ${id}:`, error);\n\n    // 오프라인 데이터에서 찾기\n    const offlineRecipe = sampleRecipes.find(recipe => recipe.id == id);\n    return offlineRecipe || null;\n  }\n};\n\n// getRecipeById 함수 추가 (RecipeDetail.jsx에서 사용)\nexport const getRecipeById = async id => {\n  // getRecipeDetails와 동일한 기능\n  return getRecipeDetails(id);\n};\n\n// getSimilarRecipes 함수 추가 (RecipeDetail.jsx에서 사용)\nexport const getSimilarRecipes = async id => {\n  const cacheKey = CACHE_KEYS.SIMILAR_RECIPES + id;\n  const cachedData = cacheManager.getCache(cacheKey);\n  if (cachedData) {\n    return cachedData;\n  }\n  try {\n    const result = await apiRequest(`/${id}/similar`, {\n      number: 4\n    });\n    cacheManager.setCache(cacheKey, result);\n    return result;\n  } catch (error) {\n    console.error(`Failed to get similar recipes for ID ${id}:`, error);\n\n    // 오프라인 데이터에서 유사 레시피 생성\n    // 이 예에서는 간단히 다른 샘플 레시피 반환\n    const otherRecipes = sampleRecipes.filter(recipe => recipe.id != id);\n    const shuffled = [...otherRecipes].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, 3);\n  }\n};\n\n// 건강 프로필 기반 추천 레시피 가져오기\nexport const getRecommendations = async (healthProfile, options = {}) => {\n  try {\n    // 건강 프로필 기반 추천 로직\n    const params = {\n      number: options.number || 8,\n      addRecipeInformation: true,\n      sort: 'random'\n    };\n\n    // 알러지 필터링\n    if (healthProfile.allergies && healthProfile.allergies.length > 0) {\n      params.intolerances = healthProfile.allergies.join(',');\n    }\n\n    // 식이 제한 필터링\n    if (healthProfile.dietaryRestrictions && healthProfile.dietaryRestrictions.length > 0) {\n      const diets = healthProfile.dietaryRestrictions.map(diet => {\n        // 다이어트 이름 포맷팅 (예: \"Gluten Free\" -> \"gluten-free\")\n        return diet.toLowerCase().replace(/\\s+/g, '-');\n      });\n      params.diet = diets[0]; // API는 하나의 다이어트만 지원\n    }\n\n    // 칼로리 필터링 (목표 기반)\n    if (healthProfile.targetCalories) {\n      const mealPercentage = 0.3; // 한 끼 식사는 일일 칼로리의 약 30%\n      const targetMealCalories = healthProfile.targetCalories * mealPercentage;\n      params.maxCalories = Math.round(targetMealCalories);\n    }\n    const results = await apiRequest('/complexSearch', params);\n    return results;\n  } catch (error) {\n    console.error('Failed to get recommendations:', error);\n\n    // 오프라인 데이터로 대체\n    // 여기서는 간단히 오프라인 데이터에서 무작위 추천\n    const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n    const selectedRecipes = shuffled.slice(0, options.number || 4);\n    return {\n      results: selectedRecipes,\n      offset: 0,\n      number: selectedRecipes.length,\n      totalResults: selectedRecipes.length\n    };\n  }\n};\n\n// 캐시 전체 초기화 함수\nexport const clearAllCache = () => {\n  try {\n    Object.values(CACHE_KEYS).forEach(key => {\n      if (typeof key === 'string' && !key.includes('_')) {\n        localStorage.removeItem(key);\n      }\n    });\n\n    // 레시피 상세 정보 캐시 삭제\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith(CACHE_KEYS.RECIPE_DETAILS)) {\n        localStorage.removeItem(key);\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Failed to clear cache:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["axios","sampleRecipes","API_KEY","BASE_URL","CACHE_KEYS","POPULAR_RECIPES","QUICK_RECIPES","RECIPE_DETAILS","SEARCH_RESULTS","SIMILAR_RECIPES","CACHE_TIMESTAMP","CACHE_EXPIRY","cacheManager","setCache","key","data","cacheData","timestamp","Date","now","localStorage","setItem","JSON","stringify","error","console","getCache","getItem","parse","removeItem","clearCache","apiRequest","endpoint","params","queryString","URLSearchParams","apiKey","toString","cacheKey","replace","cachedData","log","response","get","includes","results","offset","number","length","totalResults","match","recipeId","split","offlineRecipe","find","recipe","id","shuffled","filter","sort","Math","random","slice","searchRecipes","query","options","addRecipeInformation","fillIngredients","filteredRecipes","title","toLowerCase","maxReadyTime","readyInMinutes","diet","diets","a","b","spoonacularScore","healthScore","getRecipeDetails","result","includeNutrition","getRecipeById","getSimilarRecipes","otherRecipes","getRecommendations","healthProfile","allergies","intolerances","join","dietaryRestrictions","map","targetCalories","mealPercentage","targetMealCalories","maxCalories","round","selectedRecipes","clearAllCache","Object","values","forEach","i","startsWith"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\nimport sampleRecipes from '../data/sample-recipes.json';\r\n\r\n// API 키\r\nconst API_KEY = '1c2cb4541bed45058be2c24ef6efe661';\r\nconst BASE_URL = 'https://api.spoonacular.com/recipes';\r\n\r\n// 로컬 스토리지 키\r\nconst CACHE_KEYS = {\r\n  POPULAR_RECIPES: 'nutrigen_popular_recipes',\r\n  QUICK_RECIPES: 'nutrigen_quick_recipes',\r\n  RECIPE_DETAILS: 'nutrigen_recipe_details_',\r\n  SEARCH_RESULTS: 'nutrigen_search_results_',\r\n  SIMILAR_RECIPES: 'nutrigen_similar_recipes_',\r\n  CACHE_TIMESTAMP: '_timestamp',\r\n  CACHE_EXPIRY: 60 * 60 * 1000, // 1시간 캐시 유효시간 (밀리초)\r\n};\r\n\r\n// 캐시 관리 함수\r\nconst cacheManager = {\r\n  // 캐시 저장\r\n  setCache(key, data) {\r\n    const cacheData = {\r\n      data,\r\n      timestamp: Date.now(),\r\n    };\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(cacheData));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Cache storage error:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // 캐시 조회\r\n  getCache(key) {\r\n    try {\r\n      const cacheData = localStorage.getItem(key);\r\n      if (!cacheData) return null;\r\n\r\n      const { data, timestamp } = JSON.parse(cacheData);\r\n      // 캐시 유효시간 확인\r\n      if (Date.now() - timestamp > CACHE_KEYS.CACHE_EXPIRY) {\r\n        localStorage.removeItem(key);\r\n        return null;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Cache retrieval error:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // 캐시 삭제\r\n  clearCache(key) {\r\n    try {\r\n      localStorage.removeItem(key);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Cache removal error:', error);\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\n// API 요청 함수 (오프라인 대비 및 캐싱 포함)\r\nconst apiRequest = async (endpoint, params = {}) => {\r\n  // 캐시 키 생성\r\n  const queryString = new URLSearchParams({\r\n    ...params,\r\n    apiKey: API_KEY,\r\n  }).toString();\r\n  \r\n  const cacheKey = endpoint.replace(/\\//g, '_') + '_' + queryString;\r\n  \r\n  // 캐시 확인\r\n  const cachedData = cacheManager.getCache(cacheKey);\r\n  if (cachedData) {\r\n    console.log('Using cached data for:', endpoint);\r\n    return cachedData;\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.get(`${BASE_URL}${endpoint}`, {\r\n      params: {\r\n        ...params,\r\n        apiKey: API_KEY,\r\n      },\r\n    });\r\n    \r\n    // 응답 캐싱\r\n    cacheManager.setCache(cacheKey, response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    \r\n    // API 호출 실패 시 오프라인 데이터 사용\r\n    if (endpoint.includes('complexSearch')) {\r\n      console.log('Using offline data for search');\r\n      return {\r\n        results: sampleRecipes,\r\n        offset: 0,\r\n        number: sampleRecipes.length,\r\n        totalResults: sampleRecipes.length,\r\n      };\r\n    } \r\n    else if (endpoint.match(/^\\/\\d+\\/information/)) {\r\n      // 레시피 상세 정보 요청의 경우\r\n      const recipeId = endpoint.split('/')[1];\r\n      const offlineRecipe = sampleRecipes.find(recipe => recipe.id.toString() === recipeId);\r\n      \r\n      if (offlineRecipe) {\r\n        console.log('Using offline data for recipe detail');\r\n        return offlineRecipe;\r\n      }\r\n    }\r\n    else if (endpoint.match(/^\\/\\d+\\/similar/)) {\r\n      // 유사 레시피 요청의 경우\r\n      console.log('Using offline data for similar recipes');\r\n      // 무작위로 다른 샘플 레시피 2개 선택\r\n      const shuffled = [...sampleRecipes]\r\n        .filter(recipe => recipe.id.toString() !== endpoint.split('/')[1])\r\n        .sort(() => 0.5 - Math.random());\r\n      return shuffled.slice(0, 3);\r\n    }\r\n    \r\n    // 기타 경우 빈 결과 반환\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\n// 검색 함수\r\nexport const searchRecipes = async (query, options = {}) => {\r\n  const cacheKey = CACHE_KEYS.SEARCH_RESULTS + query + JSON.stringify(options);\r\n  const cachedData = cacheManager.getCache(cacheKey);\r\n  \r\n  if (cachedData) {\r\n    return cachedData;\r\n  }\r\n  \r\n  try {\r\n    const results = await apiRequest('/complexSearch', {\r\n      query,\r\n      addRecipeInformation: true,\r\n      fillIngredients: true,\r\n      ...options,\r\n    });\r\n    \r\n    cacheManager.setCache(cacheKey, results);\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Search failed:', error);\r\n    \r\n    // 오프라인 데이터 필터링\r\n    let filteredRecipes = [...sampleRecipes];\r\n    \r\n    // 검색어 필터링\r\n    if (query) {\r\n      filteredRecipes = filteredRecipes.filter(recipe => \r\n        recipe.title.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    // 추가 필터링 (시간, 다이어트 등)\r\n    if (options.maxReadyTime) {\r\n      filteredRecipes = filteredRecipes.filter(recipe => \r\n        recipe.readyInMinutes <= options.maxReadyTime\r\n      );\r\n    }\r\n    \r\n    if (options.diet) {\r\n      filteredRecipes = filteredRecipes.filter(recipe => \r\n        recipe.diets && recipe.diets.includes(options.diet)\r\n      );\r\n    }\r\n    \r\n    // 정렬\r\n    if (options.sort) {\r\n      switch(options.sort) {\r\n        case 'popularity':\r\n          filteredRecipes.sort((a, b) => b.spoonacularScore - a.spoonacularScore);\r\n          break;\r\n        case 'time':\r\n          filteredRecipes.sort((a, b) => a.readyInMinutes - b.readyInMinutes);\r\n          break;\r\n        case 'healthiness':\r\n          filteredRecipes.sort((a, b) => b.healthScore - a.healthScore);\r\n          break;\r\n      }\r\n    }\r\n    \r\n    // 결과 개수 제한\r\n    if (options.number) {\r\n      filteredRecipes = filteredRecipes.slice(0, options.number);\r\n    }\r\n    \r\n    return {\r\n      results: filteredRecipes,\r\n      offset: 0,\r\n      number: filteredRecipes.length,\r\n      totalResults: filteredRecipes.length\r\n    };\r\n  }\r\n};\r\n\r\n// getRecipeDetails와 getRecipeById는 동일한 기능 (이름만 다름)\r\nexport const getRecipeDetails = async (id) => {\r\n  const cacheKey = CACHE_KEYS.RECIPE_DETAILS + id;\r\n  const cachedData = cacheManager.getCache(cacheKey);\r\n  \r\n  if (cachedData) {\r\n    return cachedData;\r\n  }\r\n  \r\n  try {\r\n    const result = await apiRequest(`/${id}/information`, {\r\n      includeNutrition: true,\r\n    });\r\n    \r\n    cacheManager.setCache(cacheKey, result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error(`Failed to get recipe details for ID ${id}:`, error);\r\n    \r\n    // 오프라인 데이터에서 찾기\r\n    const offlineRecipe = sampleRecipes.find(recipe => recipe.id == id);\r\n    return offlineRecipe || null;\r\n  }\r\n};\r\n\r\n// getRecipeById 함수 추가 (RecipeDetail.jsx에서 사용)\r\nexport const getRecipeById = async (id) => {\r\n  // getRecipeDetails와 동일한 기능\r\n  return getRecipeDetails(id);\r\n};\r\n\r\n// getSimilarRecipes 함수 추가 (RecipeDetail.jsx에서 사용)\r\nexport const getSimilarRecipes = async (id) => {\r\n  const cacheKey = CACHE_KEYS.SIMILAR_RECIPES + id;\r\n  const cachedData = cacheManager.getCache(cacheKey);\r\n  \r\n  if (cachedData) {\r\n    return cachedData;\r\n  }\r\n  \r\n  try {\r\n    const result = await apiRequest(`/${id}/similar`, {\r\n      number: 4\r\n    });\r\n    \r\n    cacheManager.setCache(cacheKey, result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error(`Failed to get similar recipes for ID ${id}:`, error);\r\n    \r\n    // 오프라인 데이터에서 유사 레시피 생성\r\n    // 이 예에서는 간단히 다른 샘플 레시피 반환\r\n    const otherRecipes = sampleRecipes.filter(recipe => recipe.id != id);\r\n    const shuffled = [...otherRecipes].sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, 3);\r\n  }\r\n};\r\n\r\n// 건강 프로필 기반 추천 레시피 가져오기\r\nexport const getRecommendations = async (healthProfile, options = {}) => {\r\n  try {\r\n    // 건강 프로필 기반 추천 로직\r\n    const params = {\r\n      number: options.number || 8,\r\n      addRecipeInformation: true,\r\n      sort: 'random',\r\n    };\r\n    \r\n    // 알러지 필터링\r\n    if (healthProfile.allergies && healthProfile.allergies.length > 0) {\r\n      params.intolerances = healthProfile.allergies.join(',');\r\n    }\r\n    \r\n    // 식이 제한 필터링\r\n    if (healthProfile.dietaryRestrictions && healthProfile.dietaryRestrictions.length > 0) {\r\n      const diets = healthProfile.dietaryRestrictions.map(diet => {\r\n        // 다이어트 이름 포맷팅 (예: \"Gluten Free\" -> \"gluten-free\")\r\n        return diet.toLowerCase().replace(/\\s+/g, '-');\r\n      });\r\n      \r\n      params.diet = diets[0]; // API는 하나의 다이어트만 지원\r\n    }\r\n    \r\n    // 칼로리 필터링 (목표 기반)\r\n    if (healthProfile.targetCalories) {\r\n      const mealPercentage = 0.3; // 한 끼 식사는 일일 칼로리의 약 30%\r\n      const targetMealCalories = healthProfile.targetCalories * mealPercentage;\r\n      \r\n      params.maxCalories = Math.round(targetMealCalories);\r\n    }\r\n    \r\n    const results = await apiRequest('/complexSearch', params);\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Failed to get recommendations:', error);\r\n    \r\n    // 오프라인 데이터로 대체\r\n    // 여기서는 간단히 오프라인 데이터에서 무작위 추천\r\n    const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n    const selectedRecipes = shuffled.slice(0, options.number || 4);\r\n    \r\n    return {\r\n      results: selectedRecipes,\r\n      offset: 0,\r\n      number: selectedRecipes.length,\r\n      totalResults: selectedRecipes.length\r\n    };\r\n  }\r\n};\r\n\r\n// 캐시 전체 초기화 함수\r\nexport const clearAllCache = () => {\r\n  try {\r\n    Object.values(CACHE_KEYS).forEach(key => {\r\n      if (typeof key === 'string' && !key.includes('_')) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    });\r\n    \r\n    // 레시피 상세 정보 캐시 삭제\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith(CACHE_KEYS.RECIPE_DETAILS)) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Failed to clear cache:', error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}