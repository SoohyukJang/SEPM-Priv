{"ast":null,"code":"import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, query, where, getDocs } from 'firebase/firestore';\nimport { app } from '../firebase/config';\nconst API_KEY = 'f1b71f01b7094bd991d32d83aa5b3414';\nconst API_BASE_URL = 'https://api.spoonacular.com/recipes';\nconst db = getFirestore(app);\n\n// Sample data to use when API calls fail\nconst sampleRecipes = [{\n  id: 715538,\n  title: \"Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs\",\n  image: \"https://spoonacular.com/recipeImages/715538-312x231.jpg\",\n  readyInMinutes: 45,\n  servings: 2,\n  vegetarian: true,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 716429,\n  title: \"Simple Skillet Lasagna\",\n  image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\n  readyInMinutes: 35,\n  servings: 4,\n  vegetarian: false,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 715497,\n  title: \"Berry Banana Breakfast Smoothie\",\n  image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\n  readyInMinutes: 5,\n  servings: 1,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}, {\n  id: 721146,\n  title: \"Homemade Strawberry Lemonade\",\n  image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\n  readyInMinutes: 15,\n  servings: 8,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}];\nexport const fetchRecipes = async filters => {\n  try {\n    const {\n      query,\n      cuisine,\n      diet,\n      intolerances,\n      maxReadyTime,\n      sort\n    } = filters;\n    let url = API_BASE_URL + \"/complexSearch?apiKey=\" + API_KEY + \"&number=50\";\n    if (query) url += \"&query=\" + encodeURIComponent(query);\n    if (cuisine) url += \"&cuisine=\" + encodeURIComponent(cuisine);\n    if (diet) url += \"&diet=\" + encodeURIComponent(diet);\n    if (intolerances && intolerances.length > 0) url += \"&intolerances=\" + encodeURIComponent(intolerances.join(','));\n    if (maxReadyTime) url += \"&maxReadyTime=\" + maxReadyTime;\n    switch (sort) {\n      case 'popularity':\n        url += '&sort=popularity';\n        break;\n      case 'healthiness':\n        url += '&sort=healthiness';\n        break;\n      case 'time':\n        url += '&sort=time';\n        break;\n      default:\n        url += '&sort=popularity';\n    }\n\n    // Add additional information about recipes\n    url += '&addRecipeInformation=true&fillIngredients=true';\n    console.log(\"Fetching recipes with URL:\", url);\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.warn(\"API request failed with status \" + response.status + \". Using sample data.\");\n        return sampleRecipes;\n      }\n      const data = await response.json();\n      console.log(\"API response received, results count:\", data.results ? data.results.length : 0);\n      return data.results || [];\n    } catch (error) {\n      console.error('Error fetching recipes:', error);\n      console.warn('Using sample data for search');\n      return sampleRecipes;\n    }\n  } catch (error) {\n    console.error('Error in fetchRecipes:', error);\n    return sampleRecipes;\n  }\n};\n\n// Alias for fetchRecipes to maintain compatibility\nexport const searchRecipes = fetchRecipes;\nexport const fetchRecipeById = async recipeId => {\n  try {\n    const url = API_BASE_URL + \"/\" + recipeId + \"/information?apiKey=\" + API_KEY + \"&includeNutrition=true\";\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.warn(\"API request failed with status \" + response.status);\n        throw new Error(\"Failed to fetch recipe with ID \" + recipeId);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching recipe with ID \" + recipeId + \":\", error);\n      throw error;\n    }\n  } catch (error) {\n    console.error(\"Error in fetchRecipeById:\", error);\n    throw error;\n  }\n};\n\n// Alias for fetchRecipeById to maintain compatibility\nexport const getRecipeById = fetchRecipeById;\nexport const getSimilarRecipes = async recipeId => {\n  try {\n    const url = API_BASE_URL + \"/\" + recipeId + \"/similar?apiKey=\" + API_KEY + \"&number=4\";\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.warn(\"API request failed with status \" + response.status);\n        throw new Error(\"Failed to fetch similar recipes for ID \" + recipeId);\n      }\n      const similarRecipes = await response.json();\n\n      // Fetch full details for each similar recipe\n      const detailedRecipes = await Promise.all(similarRecipes.map(recipe => fetchRecipeById(recipe.id)));\n      return detailedRecipes;\n    } catch (error) {\n      console.error(\"Error fetching similar recipes for ID \" + recipeId + \":\", error);\n      throw error;\n    }\n  } catch (error) {\n    console.error(\"Error in getSimilarRecipes:\", error);\n    throw error;\n  }\n};\nexport const getRecommendations = async userProfile => {\n  try {\n    // Default parameters if user profile is not available\n    let diet = '';\n    let intolerances = [];\n    let query = '';\n\n    // If user profile exists, use it to customize recommendations\n    if (userProfile) {\n      if (userProfile.goal === 'Weight Loss') {\n        diet = 'low-calorie';\n      } else if (userProfile.goal === 'Build Muscle') {\n        diet = 'high-protein';\n      }\n      intolerances = userProfile.allergies || [];\n    }\n\n    // Create filters object for fetching recipes\n    const filters = {\n      query,\n      diet,\n      intolerances,\n      sort: 'popularity',\n      maxReadyTime: 60\n    };\n    return await fetchRecipes(filters);\n  } catch (error) {\n    console.error('Error getting recommendations:', error);\n    return sampleRecipes;\n  }\n};\nexport const saveRecipe = async (userId, recipe) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      // Create user document if it doesn't exist\n      await setDoc(userRef, {\n        savedRecipes: [recipe]\n      });\n    } else {\n      // Add recipe to existing savedRecipes array\n      await updateDoc(userRef, {\n        savedRecipes: arrayUnion(recipe)\n      });\n    }\n  } catch (error) {\n    console.error('Error saving recipe:', error);\n    throw error;\n  }\n};\nexport const removeRecipe = async (userId, recipeId) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      const savedRecipes = userDoc.data().savedRecipes || [];\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\n      if (recipeToRemove) {\n        await updateDoc(userRef, {\n          savedRecipes: arrayRemove(recipeToRemove)\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Error removing recipe:', error);\n    throw error;\n  }\n};\nexport const getSavedRecipes = async userId => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data().savedRecipes || [];\n    }\n    return [];\n  } catch (error) {\n    console.error('Error getting saved recipes:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getFirestore","collection","doc","getDoc","setDoc","updateDoc","arrayUnion","arrayRemove","query","where","getDocs","app","API_KEY","API_BASE_URL","db","sampleRecipes","id","title","image","readyInMinutes","servings","vegetarian","vegan","glutenFree","dairyFree","fetchRecipes","filters","cuisine","diet","intolerances","maxReadyTime","sort","url","encodeURIComponent","length","join","console","log","response","fetch","ok","warn","status","data","json","results","error","searchRecipes","fetchRecipeById","recipeId","Error","getRecipeById","getSimilarRecipes","similarRecipes","detailedRecipes","Promise","all","map","recipe","getRecommendations","userProfile","goal","allergies","saveRecipe","userId","userRef","userDoc","exists","savedRecipes","removeRecipe","recipeToRemove","find","getSavedRecipes"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, query, where, getDocs } from 'firebase/firestore';\r\nimport { app } from '../firebase/config';\r\n\r\nconst API_KEY = 'f1b71f01b7094bd991d32d83aa5b3414';\r\nconst API_BASE_URL = 'https://api.spoonacular.com/recipes';\r\n\r\nconst db = getFirestore(app);\r\n\r\n// Sample data to use when API calls fail\r\nconst sampleRecipes = [\r\n  {\r\n    id: 715538,\r\n    title: \"Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs\",\r\n    image: \"https://spoonacular.com/recipeImages/715538-312x231.jpg\",\r\n    readyInMinutes: 45,\r\n    servings: 2,\r\n    vegetarian: true,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 716429,\r\n    title: \"Simple Skillet Lasagna\",\r\n    image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\r\n    readyInMinutes: 35,\r\n    servings: 4,\r\n    vegetarian: false,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 715497,\r\n    title: \"Berry Banana Breakfast Smoothie\",\r\n    image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\r\n    readyInMinutes: 5,\r\n    servings: 1,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  {\r\n    id: 721146,\r\n    title: \"Homemade Strawberry Lemonade\",\r\n    image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\r\n    readyInMinutes: 15,\r\n    servings: 8,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  }\r\n];\r\n\r\nexport const fetchRecipes = async (filters) => {\r\n  try {\r\n    const { query, cuisine, diet, intolerances, maxReadyTime, sort } = filters;\r\n    \r\n    let url = API_BASE_URL + \"/complexSearch?apiKey=\" + API_KEY + \"&number=50\";\r\n    \r\n    if (query) url += \"&query=\" + encodeURIComponent(query);\r\n    if (cuisine) url += \"&cuisine=\" + encodeURIComponent(cuisine);\r\n    if (diet) url += \"&diet=\" + encodeURIComponent(diet);\r\n    if (intolerances && intolerances.length > 0) url += \"&intolerances=\" + encodeURIComponent(intolerances.join(','));\r\n    if (maxReadyTime) url += \"&maxReadyTime=\" + maxReadyTime;\r\n    \r\n    switch (sort) {\r\n      case 'popularity':\r\n        url += '&sort=popularity';\r\n        break;\r\n      case 'healthiness':\r\n        url += '&sort=healthiness';\r\n        break;\r\n      case 'time':\r\n        url += '&sort=time';\r\n        break;\r\n      default:\r\n        url += '&sort=popularity';\r\n    }\r\n    \r\n    // Add additional information about recipes\r\n    url += '&addRecipeInformation=true&fillIngredients=true';\r\n    \r\n    console.log(\"Fetching recipes with URL:\", url);\r\n    \r\n    try {\r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        console.warn(\"API request failed with status \" + response.status + \". Using sample data.\");\r\n        return sampleRecipes;\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(\"API response received, results count:\", data.results ? data.results.length : 0);\r\n      return data.results || [];\r\n    } catch (error) {\r\n      console.error('Error fetching recipes:', error);\r\n      console.warn('Using sample data for search');\r\n      return sampleRecipes;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in fetchRecipes:', error);\r\n    return sampleRecipes;\r\n  }\r\n};\r\n\r\n// Alias for fetchRecipes to maintain compatibility\r\nexport const searchRecipes = fetchRecipes;\r\n\r\nexport const fetchRecipeById = async (recipeId) => {\r\n  try {\r\n    const url = API_BASE_URL + \"/\" + recipeId + \"/information?apiKey=\" + API_KEY + \"&includeNutrition=true\";\r\n    \r\n    try {\r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        console.warn(\"API request failed with status \" + response.status);\r\n        throw new Error(\"Failed to fetch recipe with ID \" + recipeId);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Error fetching recipe with ID \" + recipeId + \":\", error);\r\n      throw error;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in fetchRecipeById:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Alias for fetchRecipeById to maintain compatibility\r\nexport const getRecipeById = fetchRecipeById;\r\n\r\nexport const getSimilarRecipes = async (recipeId) => {\r\n  try {\r\n    const url = API_BASE_URL + \"/\" + recipeId + \"/similar?apiKey=\" + API_KEY + \"&number=4\";\r\n    \r\n    try {\r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        console.warn(\"API request failed with status \" + response.status);\r\n        throw new Error(\"Failed to fetch similar recipes for ID \" + recipeId);\r\n      }\r\n      \r\n      const similarRecipes = await response.json();\r\n      \r\n      // Fetch full details for each similar recipe\r\n      const detailedRecipes = await Promise.all(\r\n        similarRecipes.map(recipe => fetchRecipeById(recipe.id))\r\n      );\r\n      \r\n      return detailedRecipes;\r\n    } catch (error) {\r\n      console.error(\"Error fetching similar recipes for ID \" + recipeId + \":\", error);\r\n      throw error;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in getSimilarRecipes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getRecommendations = async (userProfile) => {\r\n  try {\r\n    // Default parameters if user profile is not available\r\n    let diet = '';\r\n    let intolerances = [];\r\n    let query = '';\r\n    \r\n    // If user profile exists, use it to customize recommendations\r\n    if (userProfile) {\r\n      if (userProfile.goal === 'Weight Loss') {\r\n        diet = 'low-calorie';\r\n      } else if (userProfile.goal === 'Build Muscle') {\r\n        diet = 'high-protein';\r\n      }\r\n      \r\n      intolerances = userProfile.allergies || [];\r\n    }\r\n    \r\n    // Create filters object for fetching recipes\r\n    const filters = {\r\n      query,\r\n      diet,\r\n      intolerances,\r\n      sort: 'popularity',\r\n      maxReadyTime: 60\r\n    };\r\n    \r\n    return await fetchRecipes(filters);\r\n  } catch (error) {\r\n    console.error('Error getting recommendations:', error);\r\n    return sampleRecipes;\r\n  }\r\n};\r\n\r\nexport const saveRecipe = async (userId, recipe) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (!userDoc.exists()) {\r\n      // Create user document if it doesn't exist\r\n      await setDoc(userRef, {\r\n        savedRecipes: [recipe]\r\n      });\r\n    } else {\r\n      // Add recipe to existing savedRecipes array\r\n      await updateDoc(userRef, {\r\n        savedRecipes: arrayUnion(recipe)\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeRecipe = async (userId, recipeId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      const savedRecipes = userDoc.data().savedRecipes || [];\r\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\r\n      \r\n      if (recipeToRemove) {\r\n        await updateDoc(userRef, {\r\n          savedRecipes: arrayRemove(recipeToRemove)\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error removing recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSavedRecipes = async (userId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      return userDoc.data().savedRecipes || [];\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error getting saved recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}