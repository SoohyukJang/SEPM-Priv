{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SoohyukJANG\\\\Documents\\\\GitHub\\\\SEPM-Priv\\\\SEPM\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, sendPasswordResetEmail } from 'firebase/auth';\nimport { auth, db } from '../firebase/config';\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  async function signup(email, password, displayName) {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Create user document in Firestore\n      await setDoc(doc(db, 'users', user.uid), {\n        displayName,\n        email,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n      return user;\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      throw error;\n    }\n  }\n  async function login(email, password) {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      return userCredential.user;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  }\n  async function logout() {\n    try {\n      await signOut(auth);\n      return true;\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      throw error;\n    }\n  }\n  async function googleLogin() {\n    try {\n      // 명시적으로 새 provider 인스턴스 생성\n      const provider = new GoogleAuthProvider();\n      // 항상 계정 선택 창을 보여주도록 설정\n      provider.setCustomParameters({\n        prompt: 'select_account'\n      });\n      console.log(\"Starting Google sign in process...\");\n      const result = await signInWithPopup(auth, provider);\n      console.log(\"Google sign in successful:\", result);\n      const user = result.user;\n\n      // Check if user exists in Firestore\n      const userDoc = await getDoc(doc(db, 'users', user.uid));\n      if (!userDoc.exists()) {\n        // Create user document if it doesn't exist\n        console.log(\"Creating new user document in Firestore\");\n        await setDoc(doc(db, 'users', user.uid), {\n          displayName: user.displayName || '',\n          email: user.email,\n          photoURL: user.photoURL || '',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp()\n        });\n      } else {\n        console.log(\"User already exists in Firestore\");\n      }\n      return user;\n    } catch (error) {\n      console.error(\"Google login error:\", error.code, error.message);\n      // 상세한 오류 정보 기록\n      if (error.code === 'auth/popup-blocked') {\n        console.error(\"Popup was blocked by the browser\");\n      } else if (error.code === 'auth/popup-closed-by-user') {\n        console.error(\"User closed the popup without completing signin\");\n      } else if (error.code === 'auth/cancelled-popup-request') {\n        console.error(\"Multiple popup requests were triggered\");\n      } else if (error.code === 'auth/network-request-failed') {\n        console.error(\"Network error occurred during signin\");\n      }\n      throw error;\n    }\n  }\n  async function resetPassword(email) {\n    try {\n      await sendPasswordResetEmail(auth, email);\n      return true;\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      throw error;\n    }\n  }\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      console.log(\"Auth state changed:\", user ? \"User is signed in\" : \"User is signed out\");\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    googleLogin,\n    resetPassword\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","sendPasswordResetEmail","auth","db","doc","setDoc","getDoc","serverTimestamp","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","signup","email","password","displayName","userCredential","user","uid","createdAt","updatedAt","error","console","login","logout","googleLogin","provider","setCustomParameters","prompt","log","result","userDoc","exists","photoURL","code","message","resetPassword","unsubscribe","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  sendPasswordResetEmail\r\n} from 'firebase/auth';\r\nimport { auth, db } from '../firebase/config';\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  async function signup(email, password, displayName) {\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n      \r\n      // Create user document in Firestore\r\n      await setDoc(doc(db, 'users', user.uid), {\r\n        displayName,\r\n        email,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error(\"Signup error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async function login(email, password) {\r\n    try {\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      return userCredential.user;\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async function logout() {\r\n    try {\r\n      await signOut(auth);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Logout error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async function googleLogin() {\r\n    try {\r\n      // 명시적으로 새 provider 인스턴스 생성\r\n      const provider = new GoogleAuthProvider();\r\n      // 항상 계정 선택 창을 보여주도록 설정\r\n      provider.setCustomParameters({ prompt: 'select_account' });\r\n      \r\n      console.log(\"Starting Google sign in process...\");\r\n      const result = await signInWithPopup(auth, provider);\r\n      console.log(\"Google sign in successful:\", result);\r\n      \r\n      const user = result.user;\r\n      \r\n      // Check if user exists in Firestore\r\n      const userDoc = await getDoc(doc(db, 'users', user.uid));\r\n      \r\n      if (!userDoc.exists()) {\r\n        // Create user document if it doesn't exist\r\n        console.log(\"Creating new user document in Firestore\");\r\n        await setDoc(doc(db, 'users', user.uid), {\r\n          displayName: user.displayName || '',\r\n          email: user.email,\r\n          photoURL: user.photoURL || '',\r\n          createdAt: serverTimestamp(),\r\n          updatedAt: serverTimestamp()\r\n        });\r\n      } else {\r\n        console.log(\"User already exists in Firestore\");\r\n      }\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error(\"Google login error:\", error.code, error.message);\r\n      // 상세한 오류 정보 기록\r\n      if (error.code === 'auth/popup-blocked') {\r\n        console.error(\"Popup was blocked by the browser\");\r\n      } else if (error.code === 'auth/popup-closed-by-user') {\r\n        console.error(\"User closed the popup without completing signin\");\r\n      } else if (error.code === 'auth/cancelled-popup-request') {\r\n        console.error(\"Multiple popup requests were triggered\");\r\n      } else if (error.code === 'auth/network-request-failed') {\r\n        console.error(\"Network error occurred during signin\");\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async function resetPassword(email) {\r\n    try {\r\n      await sendPasswordResetEmail(auth, email);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Reset password error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      console.log(\"Auth state changed:\", user ? \"User is signed in\" : \"User is signed out\");\r\n      setCurrentUser(user);\r\n      setLoading(false);\r\n    });\r\n    \r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout,\r\n    googleLogin,\r\n    resetPassword\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SACEC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,EACPC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,EACfC,sBAAsB,QACjB,eAAe;AACtB,SAASC,IAAI,EAAEC,EAAE,QAAQ,oBAAoB;AAC7C,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,eAAe,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,WAAW,gBAAGnB,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASoB,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAOnB,UAAU,CAACiB,WAAW,CAAC;AAChC;AAACE,EAAA,CAFeD,OAAO;AAIvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAE5C,eAAe4B,MAAMA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,EAAE;IAClD,IAAI;MACF,MAAMC,cAAc,GAAG,MAAM7B,8BAA8B,CAACO,IAAI,EAAEmB,KAAK,EAAEC,QAAQ,CAAC;MAClF,MAAMG,IAAI,GAAGD,cAAc,CAACC,IAAI;;MAEhC;MACA,MAAMpB,MAAM,CAACD,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEsB,IAAI,CAACC,GAAG,CAAC,EAAE;QACvCH,WAAW;QACXF,KAAK;QACLM,SAAS,EAAEpB,eAAe,CAAC,CAAC;QAC5BqB,SAAS,EAAErB,eAAe,CAAC;MAC7B,CAAC,CAAC;MAEF,OAAOkB,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;EAEA,eAAeE,KAAKA,CAACV,KAAK,EAAEC,QAAQ,EAAE;IACpC,IAAI;MACF,MAAME,cAAc,GAAG,MAAM5B,0BAA0B,CAACM,IAAI,EAAEmB,KAAK,EAAEC,QAAQ,CAAC;MAC9E,OAAOE,cAAc,CAACC,IAAI;IAC5B,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;EAEA,eAAeG,MAAMA,CAAA,EAAG;IACtB,IAAI;MACF,MAAMnC,OAAO,CAACK,IAAI,CAAC;MACnB,OAAO,IAAI;IACb,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;EAEA,eAAeI,WAAWA,CAAA,EAAG;IAC3B,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,IAAInC,kBAAkB,CAAC,CAAC;MACzC;MACAmC,QAAQ,CAACC,mBAAmB,CAAC;QAAEC,MAAM,EAAE;MAAiB,CAAC,CAAC;MAE1DN,OAAO,CAACO,GAAG,CAAC,oCAAoC,CAAC;MACjD,MAAMC,MAAM,GAAG,MAAMtC,eAAe,CAACE,IAAI,EAAEgC,QAAQ,CAAC;MACpDJ,OAAO,CAACO,GAAG,CAAC,4BAA4B,EAAEC,MAAM,CAAC;MAEjD,MAAMb,IAAI,GAAGa,MAAM,CAACb,IAAI;;MAExB;MACA,MAAMc,OAAO,GAAG,MAAMjC,MAAM,CAACF,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEsB,IAAI,CAACC,GAAG,CAAC,CAAC;MAExD,IAAI,CAACa,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;QACrB;QACAV,OAAO,CAACO,GAAG,CAAC,yCAAyC,CAAC;QACtD,MAAMhC,MAAM,CAACD,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEsB,IAAI,CAACC,GAAG,CAAC,EAAE;UACvCH,WAAW,EAAEE,IAAI,CAACF,WAAW,IAAI,EAAE;UACnCF,KAAK,EAAEI,IAAI,CAACJ,KAAK;UACjBoB,QAAQ,EAAEhB,IAAI,CAACgB,QAAQ,IAAI,EAAE;UAC7Bd,SAAS,EAAEpB,eAAe,CAAC,CAAC;UAC5BqB,SAAS,EAAErB,eAAe,CAAC;QAC7B,CAAC,CAAC;MACJ,CAAC,MAAM;QACLuB,OAAO,CAACO,GAAG,CAAC,kCAAkC,CAAC;MACjD;MAEA,OAAOZ,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACa,IAAI,EAAEb,KAAK,CAACc,OAAO,CAAC;MAC/D;MACA,IAAId,KAAK,CAACa,IAAI,KAAK,oBAAoB,EAAE;QACvCZ,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAC;MACnD,CAAC,MAAM,IAAIA,KAAK,CAACa,IAAI,KAAK,2BAA2B,EAAE;QACrDZ,OAAO,CAACD,KAAK,CAAC,iDAAiD,CAAC;MAClE,CAAC,MAAM,IAAIA,KAAK,CAACa,IAAI,KAAK,8BAA8B,EAAE;QACxDZ,OAAO,CAACD,KAAK,CAAC,wCAAwC,CAAC;MACzD,CAAC,MAAM,IAAIA,KAAK,CAACa,IAAI,KAAK,6BAA6B,EAAE;QACvDZ,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAC;MACvD;MACA,MAAMA,KAAK;IACb;EACF;EAEA,eAAee,aAAaA,CAACvB,KAAK,EAAE;IAClC,IAAI;MACF,MAAMpB,sBAAsB,CAACC,IAAI,EAAEmB,KAAK,CAAC;MACzC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;EAEAnC,SAAS,CAAC,MAAM;IACd,MAAMmD,WAAW,GAAG/C,kBAAkB,CAACI,IAAI,EAAGuB,IAAI,IAAK;MACrDK,OAAO,CAACO,GAAG,CAAC,qBAAqB,EAAEZ,IAAI,GAAG,mBAAmB,GAAG,oBAAoB,CAAC;MACrFR,cAAc,CAACQ,IAAI,CAAC;MACpBN,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO0B,WAAW;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAG;IACZ9B,WAAW;IACXI,MAAM;IACNW,KAAK;IACLC,MAAM;IACNC,WAAW;IACXW;EACF,CAAC;EAED,oBACEnC,OAAA,CAACC,WAAW,CAACqC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhC,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B;AAACpC,GAAA,CA7HeF,YAAY;AAAAuC,EAAA,GAAZvC,YAAY;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}