{"ast":null,"code":"import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, query, where, getDocs } from 'firebase/firestore';\nimport { app } from '../firebase/config';\n\n// Sample data to use when API calls fail\nconst sampleRecipes = [{\n  id: 715538,\n  title: \"Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs\",\n  image: \"https://spoonacular.com/recipeImages/715538-312x231.jpg\",\n  imageType: \"jpg\",\n  readyInMinutes: 45,\n  servings: 2,\n  vegetarian: true,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 716429,\n  title: \"Simple Skillet Lasagna\",\n  image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\n  imageType: \"jpg\",\n  readyInMinutes: 35,\n  servings: 4,\n  vegetarian: false,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 715497,\n  title: \"Berry Banana Breakfast Smoothie\",\n  image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\n  imageType: \"jpg\",\n  readyInMinutes: 5,\n  servings: 1,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}, {\n  id: 721146,\n  title: \"Homemade Strawberry Lemonade\",\n  image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\n  imageType: \"jpg\",\n  readyInMinutes: 15,\n  servings: 8,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}, {\n  id: 782622,\n  title: \"Chocolate Peanut Butter Smoothie\",\n  image: \"https://spoonacular.com/recipeImages/782622-312x231.jpg\",\n  imageType: \"jpg\",\n  readyInMinutes: 5,\n  servings: 1,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: false\n}, {\n  id: 794349,\n  title: \"Broccoli and Chickpea Rice Salad\",\n  image: \"https://spoonacular.com/recipeImages/794349-312x231.jpg\",\n  imageType: \"jpg\",\n  readyInMinutes: 45,\n  servings: 6,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}, {\n  id: 715415,\n  title: \"Red Lentil Soup with Chicken and Turnips\",\n  image: \"https://spoonacular.com/recipeImages/715415-312x231.jpg\",\n  imageType: \"jpg\",\n  readyInMinutes: 55,\n  servings: 8,\n  vegetarian: false,\n  vegan: false,\n  glutenFree: true,\n  dairyFree: true\n}, {\n  id: 716406,\n  title: \"Asparagus and Pea Soup: Real Convenience Food\",\n  image: \"https://spoonacular.com/recipeImages/716406-312x231.jpg\",\n  imageType: \"jpg\",\n  readyInMinutes: 30,\n  servings: 2,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}];\nconst API_KEY = 'f1b71f01b7094bd991d32d83aa5b3414';\nconst API_BASE_URL = 'https://api.spoonacular.com/recipes';\nconst db = getFirestore(app);\nexport const fetchRecipes = async filters => {\n  try {\n    const {\n      query,\n      cuisine,\n      diet,\n      intolerances,\n      maxReadyTime,\n      sort\n    } = filters;\n    let url = `${API_BASE_URL}/complexSearch?apiKey=${API_KEY}&number=50`;\n    if (query) url += `&query=${encodeURIComponent(query)}`;\n    if (cuisine) url += `&cuisine=${encodeURIComponent(cuisine)}`;\n    if (diet) url += `&diet=${encodeURIComponent(diet)}`;\n    if (intolerances && intolerances.length > 0) url += `&intolerances=${encodeURIComponent(intolerances.join(','))}`;\n    if (maxReadyTime) url += `&maxReadyTime=${maxReadyTime}`;\n    switch (sort) {\n      case 'popularity':\n        url += '&sort=popularity';\n        break;\n      case 'healthiness':\n        url += '&sort=healthiness';\n        break;\n      case 'time':\n        url += '&sort=time';\n        break;\n      default:\n        url += '&sort=popularity';\n    }\n\n    // Add additional information about recipes\n    url += '&addRecipeInformation=true&fillIngredients=true';\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.warn(`API request failed with status ${response.status}. Using offline data.`);\n        return filterSampleRecipes(filters);\n      }\n      const data = await response.json();\n      return data.results;\n    } catch (error) {\n      console.error('Error fetching recipes:', error);\n      console.warn('Using offline data for search');\n      return filterSampleRecipes(filters);\n    }\n  } catch (error) {\n    console.error('Error in fetchRecipes:', error);\n    return filterSampleRecipes(filters);\n  }\n};\n\n// Helper function to filter sample recipes based on user filters\nconst filterSampleRecipes = filters => {\n  let filtered = [...sampleRecipes];\n  if (filters.query) {\n    const query = filters.query.toLowerCase();\n    filtered = filtered.filter(recipe => recipe.title.toLowerCase().includes(query));\n  }\n  if (filters.diet === 'vegetarian') {\n    filtered = filtered.filter(recipe => recipe.vegetarian);\n  } else if (filters.diet === 'vegan') {\n    filtered = filtered.filter(recipe => recipe.vegan);\n  } else if (filters.diet === 'gluten free') {\n    filtered = filtered.filter(recipe => recipe.glutenFree);\n  } else if (filters.diet === 'dairy free') {\n    filtered = filtered.filter(recipe => recipe.dairyFree);\n  }\n  if (filters.maxReadyTime) {\n    filtered = filtered.filter(recipe => recipe.readyInMinutes <= filters.maxReadyTime);\n  }\n  return filtered;\n};\n\n// Alias for fetchRecipes to maintain compatibility\nexport const searchRecipes = fetchRecipes;\nexport const fetchRecipeById = async recipeId => {\n  try {\n    const url = `${API_BASE_URL}/${recipeId}/information?apiKey=${API_KEY}&includeNutrition=true`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching recipe with ID ${recipeId}:`, error);\n    throw error;\n  }\n};\n\n// Alias for fetchRecipeById to maintain compatibility\nexport const getRecipeById = fetchRecipeById;\nexport const getSimilarRecipes = async recipeId => {\n  try {\n    const url = `${API_BASE_URL}/${recipeId}/similar?apiKey=${API_KEY}&number=4`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    const similarRecipes = await response.json();\n\n    // Fetch full details for each similar recipe\n    const detailedRecipes = await Promise.all(similarRecipes.map(recipe => fetchRecipeById(recipe.id)));\n    return detailedRecipes;\n  } catch (error) {\n    console.error(`Error fetching similar recipes for ID ${recipeId}:`, error);\n    throw error;\n  }\n};\nexport const getRecommendations = async userProfile => {\n  try {\n    // Default parameters if user profile is not available\n    let diet = '';\n    let intolerances = [];\n    let query = '';\n\n    // If user profile exists, use it to customize recommendations\n    if (userProfile) {\n      if (userProfile.goal === 'Weight Loss') {\n        diet = 'low-calorie';\n      } else if (userProfile.goal === 'Build Muscle') {\n        diet = 'high-protein';\n      }\n      intolerances = userProfile.allergies || [];\n    }\n\n    // Create filters object for fetching recipes\n    const filters = {\n      query,\n      diet,\n      intolerances,\n      sort: 'popularity',\n      maxReadyTime: 60\n    };\n    return await fetchRecipes(filters);\n  } catch (error) {\n    console.error('Error getting recommendations:', error);\n    throw error;\n  }\n};\nexport const saveRecipe = async (userId, recipe) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      // Create user document if it doesn't exist\n      await setDoc(userRef, {\n        savedRecipes: [recipe]\n      });\n    } else {\n      // Add recipe to existing savedRecipes array\n      await updateDoc(userRef, {\n        savedRecipes: arrayUnion(recipe)\n      });\n    }\n  } catch (error) {\n    console.error('Error saving recipe:', error);\n    throw error;\n  }\n};\nexport const removeRecipe = async (userId, recipeId) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      const savedRecipes = userDoc.data().savedRecipes || [];\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\n      if (recipeToRemove) {\n        await updateDoc(userRef, {\n          savedRecipes: arrayRemove(recipeToRemove)\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Error removing recipe:', error);\n    throw error;\n  }\n};\nexport const getSavedRecipes = async userId => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data().savedRecipes || [];\n    }\n    return [];\n  } catch (error) {\n    console.error('Error getting saved recipes:', error);\n    throw error;\n  }\n};\n\n// Add more API service functions as needed","map":{"version":3,"names":["getFirestore","collection","doc","getDoc","setDoc","updateDoc","arrayUnion","arrayRemove","query","where","getDocs","app","sampleRecipes","id","title","image","imageType","readyInMinutes","servings","vegetarian","vegan","glutenFree","dairyFree","API_KEY","API_BASE_URL","db","fetchRecipes","filters","cuisine","diet","intolerances","maxReadyTime","sort","url","encodeURIComponent","length","join","response","fetch","ok","console","warn","status","filterSampleRecipes","data","json","results","error","filtered","toLowerCase","filter","recipe","includes","searchRecipes","fetchRecipeById","recipeId","Error","getRecipeById","getSimilarRecipes","similarRecipes","detailedRecipes","Promise","all","map","getRecommendations","userProfile","goal","allergies","saveRecipe","userId","userRef","userDoc","exists","savedRecipes","removeRecipe","recipeToRemove","find","getSavedRecipes"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, query, where, getDocs } from 'firebase/firestore';\r\nimport { app } from '../firebase/config';\r\n\r\n\r\n// Sample data to use when API calls fail\r\nconst sampleRecipes = [\r\n  {\r\n    id: 715538,\r\n    title: \"Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs\",\r\n    image: \"https://spoonacular.com/recipeImages/715538-312x231.jpg\",\r\n    imageType: \"jpg\",\r\n    readyInMinutes: 45,\r\n    servings: 2,\r\n    vegetarian: true,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 716429,\r\n    title: \"Simple Skillet Lasagna\",\r\n    image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\r\n    imageType: \"jpg\",\r\n    readyInMinutes: 35,\r\n    servings: 4,\r\n    vegetarian: false,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 715497,\r\n    title: \"Berry Banana Breakfast Smoothie\",\r\n    image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\r\n    imageType: \"jpg\",\r\n    readyInMinutes: 5,\r\n    servings: 1,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  {\r\n    id: 721146,\r\n    title: \"Homemade Strawberry Lemonade\",\r\n    image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\r\n    imageType: \"jpg\",\r\n    readyInMinutes: 15,\r\n    servings: 8,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  {\r\n    id: 782622,\r\n    title: \"Chocolate Peanut Butter Smoothie\",\r\n    image: \"https://spoonacular.com/recipeImages/782622-312x231.jpg\",\r\n    imageType: \"jpg\",\r\n    readyInMinutes: 5,\r\n    servings: 1,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 794349,\r\n    title: \"Broccoli and Chickpea Rice Salad\",\r\n    image: \"https://spoonacular.com/recipeImages/794349-312x231.jpg\",\r\n    imageType: \"jpg\",\r\n    readyInMinutes: 45,\r\n    servings: 6,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  {\r\n    id: 715415,\r\n    title: \"Red Lentil Soup with Chicken and Turnips\",\r\n    image: \"https://spoonacular.com/recipeImages/715415-312x231.jpg\",\r\n    imageType: \"jpg\",\r\n    readyInMinutes: 55,\r\n    servings: 8,\r\n    vegetarian: false,\r\n    vegan: false,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  {\r\n    id: 716406,\r\n    title: \"Asparagus and Pea Soup: Real Convenience Food\",\r\n    image: \"https://spoonacular.com/recipeImages/716406-312x231.jpg\",\r\n    imageType: \"jpg\",\r\n    readyInMinutes: 30,\r\n    servings: 2,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  }\r\n];\r\n\r\n\r\nconst API_KEY = 'f1b71f01b7094bd991d32d83aa5b3414';\r\nconst API_BASE_URL = 'https://api.spoonacular.com/recipes';\r\n\r\nconst db = getFirestore(app);\r\n\r\n\r\nexport const fetchRecipes = async (filters) => {\r\n  try {\r\n    const { query, cuisine, diet, intolerances, maxReadyTime, sort } = filters;\r\n    \r\n    let url = `${API_BASE_URL}/complexSearch?apiKey=${API_KEY}&number=50`;\r\n    \r\n    if (query) url += `&query=${encodeURIComponent(query)}`;\r\n    if (cuisine) url += `&cuisine=${encodeURIComponent(cuisine)}`;\r\n    if (diet) url += `&diet=${encodeURIComponent(diet)}`;\r\n    if (intolerances && intolerances.length > 0) url += `&intolerances=${encodeURIComponent(intolerances.join(','))}`;\r\n    if (maxReadyTime) url += `&maxReadyTime=${maxReadyTime}`;\r\n    \r\n    switch (sort) {\r\n      case 'popularity':\r\n        url += '&sort=popularity';\r\n        break;\r\n      case 'healthiness':\r\n        url += '&sort=healthiness';\r\n        break;\r\n      case 'time':\r\n        url += '&sort=time';\r\n        break;\r\n      default:\r\n        url += '&sort=popularity';\r\n    }\r\n    \r\n    // Add additional information about recipes\r\n    url += '&addRecipeInformation=true&fillIngredients=true';\r\n    \r\n    try {\r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        console.warn(`API request failed with status ${response.status}. Using offline data.`);\r\n        return filterSampleRecipes(filters);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      return data.results;\r\n    } catch (error) {\r\n      console.error('Error fetching recipes:', error);\r\n      console.warn('Using offline data for search');\r\n      return filterSampleRecipes(filters);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in fetchRecipes:', error);\r\n    return filterSampleRecipes(filters);\r\n  }\r\n};\r\n\r\n// Helper function to filter sample recipes based on user filters\r\nconst filterSampleRecipes = (filters) => {\r\n  let filtered = [...sampleRecipes];\r\n  \r\n  if (filters.query) {\r\n    const query = filters.query.toLowerCase();\r\n    filtered = filtered.filter(recipe => \r\n      recipe.title.toLowerCase().includes(query)\r\n    );\r\n  }\r\n  \r\n  if (filters.diet === 'vegetarian') {\r\n    filtered = filtered.filter(recipe => recipe.vegetarian);\r\n  } else if (filters.diet === 'vegan') {\r\n    filtered = filtered.filter(recipe => recipe.vegan);\r\n  } else if (filters.diet === 'gluten free') {\r\n    filtered = filtered.filter(recipe => recipe.glutenFree);\r\n  } else if (filters.diet === 'dairy free') {\r\n    filtered = filtered.filter(recipe => recipe.dairyFree);\r\n  }\r\n  \r\n  if (filters.maxReadyTime) {\r\n    filtered = filtered.filter(recipe => recipe.readyInMinutes <= filters.maxReadyTime);\r\n  }\r\n  \r\n  return filtered;\r\n};\r\n\r\n\r\n// Alias for fetchRecipes to maintain compatibility\r\nexport const searchRecipes = fetchRecipes;\r\n\r\nexport const fetchRecipeById = async (recipeId) => {\r\n  try {\r\n    const url = `${API_BASE_URL}/${recipeId}/information?apiKey=${API_KEY}&includeNutrition=true`;\r\n    const response = await fetch(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API request failed with status ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error fetching recipe with ID ${recipeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Alias for fetchRecipeById to maintain compatibility\r\nexport const getRecipeById = fetchRecipeById;\r\n\r\nexport const getSimilarRecipes = async (recipeId) => {\r\n  try {\r\n    const url = `${API_BASE_URL}/${recipeId}/similar?apiKey=${API_KEY}&number=4`;\r\n    const response = await fetch(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API request failed with status ${response.status}`);\r\n    }\r\n    \r\n    const similarRecipes = await response.json();\r\n    \r\n    // Fetch full details for each similar recipe\r\n    const detailedRecipes = await Promise.all(\r\n      similarRecipes.map(recipe => fetchRecipeById(recipe.id))\r\n    );\r\n    \r\n    return detailedRecipes;\r\n  } catch (error) {\r\n    console.error(`Error fetching similar recipes for ID ${recipeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getRecommendations = async (userProfile) => {\r\n  try {\r\n    // Default parameters if user profile is not available\r\n    let diet = '';\r\n    let intolerances = [];\r\n    let query = '';\r\n    \r\n    // If user profile exists, use it to customize recommendations\r\n    if (userProfile) {\r\n      if (userProfile.goal === 'Weight Loss') {\r\n        diet = 'low-calorie';\r\n      } else if (userProfile.goal === 'Build Muscle') {\r\n        diet = 'high-protein';\r\n      }\r\n      \r\n      intolerances = userProfile.allergies || [];\r\n    }\r\n    \r\n    // Create filters object for fetching recipes\r\n    const filters = {\r\n      query,\r\n      diet,\r\n      intolerances,\r\n      sort: 'popularity',\r\n      maxReadyTime: 60\r\n    };\r\n    \r\n    return await fetchRecipes(filters);\r\n  } catch (error) {\r\n    console.error('Error getting recommendations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const saveRecipe = async (userId, recipe) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (!userDoc.exists()) {\r\n      // Create user document if it doesn't exist\r\n      await setDoc(userRef, {\r\n        savedRecipes: [recipe]\r\n      });\r\n    } else {\r\n      // Add recipe to existing savedRecipes array\r\n      await updateDoc(userRef, {\r\n        savedRecipes: arrayUnion(recipe)\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeRecipe = async (userId, recipeId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      const savedRecipes = userDoc.data().savedRecipes || [];\r\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\r\n      \r\n      if (recipeToRemove) {\r\n        await updateDoc(userRef, {\r\n          savedRecipes: arrayRemove(recipeToRemove)\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error removing recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSavedRecipes = async (userId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      return userDoc.data().savedRecipes || [];\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error getting saved recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add more API service functions as needed\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}