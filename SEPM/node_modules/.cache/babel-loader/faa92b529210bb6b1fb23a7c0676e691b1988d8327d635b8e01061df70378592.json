{"ast":null,"code":"// src/services/apiService.js\nimport axios from 'axios';\n\n// Spoonacular API configuration\nconst API_KEY = 'eeb775beabdd459eb5f8e5983978fff1';\nconst BASE_URL = 'https://api.spoonacular.com';\n\n// Create Axios instance with default configurations\nconst apiClient = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    apiKey: API_KEY\n  }\n});\n\n// Mock data for fallback in case API is unavailable\nconst mockRecipes = [{\n  id: 1,\n  title: 'Mediterranean Salad Bowl',\n  image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd',\n  calories: 320,\n  dietType: 'Low Calorie',\n  readyInMinutes: 15,\n  servings: 2,\n  summary: 'Fresh vegetables with olive oil and feta cheese for a perfect light lunch.'\n}, {\n  id: 2,\n  title: 'Quinoa Protein Bowl',\n  image: 'https://images.unsplash.com/photo-1490645935967-10de6ba17061',\n  calories: 450,\n  dietType: 'High Protein',\n  readyInMinutes: 25,\n  servings: 2,\n  summary: 'A balanced meal with quinoa, grilled chicken, and fresh vegetables.'\n}, {\n  id: 3,\n  title: 'Berry Smoothie Bowl',\n  image: 'https://images.unsplash.com/photo-1495214783159-3503fd1b572d',\n  calories: 280,\n  dietType: 'Vegan',\n  readyInMinutes: 10,\n  servings: 1,\n  summary: 'Refreshing smoothie bowl with mixed berries, banana, and chia seeds.'\n}];\n\n// API Service for recipe operations\nconst RecipeService = {\n  // Search recipes with complex filtering\n  searchRecipes: async params => {\n    try {\n      const response = await apiClient.get('/recipes/complexSearch', {\n        params: {\n          ...params,\n          addRecipeNutrition: true,\n          number: 12\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipes:', error);\n      // Return mock data if API fails\n      return {\n        results: mockRecipes\n      };\n    }\n  },\n  // Get recipes by ingredients\n  getRecipesByIngredients: async (ingredients, number = 10) => {\n    try {\n      const response = await apiClient.get('/recipes/findByIngredients', {\n        params: {\n          ingredients: ingredients.join(','),\n          number\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipes by ingredients:', error);\n      return mockRecipes;\n    }\n  },\n  // Get recipes by nutrients\n  getRecipesByNutrients: async params => {\n    try {\n      const response = await apiClient.get('/recipes/findByNutrients', {\n        params: {\n          ...params,\n          number: 10\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipes by nutrients:', error);\n      return mockRecipes;\n    }\n  },\n  // Get recipe details by ID\n  getRecipeDetails: async id => {\n    try {\n      const response = await apiClient.get(`/recipes/${id}/information`, {\n        params: {\n          includeNutrition: true\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching recipe details for ID ${id}:`, error);\n      // Return a mock recipe if API fails\n      return mockRecipes.find(recipe => recipe.id === id) || mockRecipes[0];\n    }\n  },\n  // Get personalized recommendations based on user profile\n  getPersonalizedRecipes: async userProfile => {\n    // Extract relevant user data for recipe recommendations\n    const {\n      diet,\n      intolerances,\n      excludeIngredients,\n      targetCalories\n    } = userProfile;\n    try {\n      const response = await apiClient.get('/recipes/complexSearch', {\n        params: {\n          diet,\n          intolerances,\n          excludeIngredients,\n          maxCalories: targetCalories,\n          addRecipeNutrition: true,\n          number: 6,\n          sort: 'random'\n        }\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching personalized recipes:', error);\n      return mockRecipes;\n    }\n  }\n};\nexport default RecipeService;","map":{"version":3,"names":["axios","API_KEY","BASE_URL","apiClient","create","baseURL","params","apiKey","mockRecipes","id","title","image","calories","dietType","readyInMinutes","servings","summary","RecipeService","searchRecipes","response","get","addRecipeNutrition","number","data","error","console","results","getRecipesByIngredients","ingredients","join","getRecipesByNutrients","getRecipeDetails","includeNutrition","find","recipe","getPersonalizedRecipes","userProfile","diet","intolerances","excludeIngredients","targetCalories","maxCalories","sort"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["// src/services/apiService.js\r\nimport axios from 'axios';\r\n\r\n// Spoonacular API configuration\r\nconst API_KEY = 'eeb775beabdd459eb5f8e5983978fff1';\r\nconst BASE_URL = 'https://api.spoonacular.com';\r\n\r\n// Create Axios instance with default configurations\r\nconst apiClient = axios.create({\r\n  baseURL: BASE_URL,\r\n  params: {\r\n    apiKey: API_KEY\r\n  }\r\n});\r\n\r\n// Mock data for fallback in case API is unavailable\r\nconst mockRecipes = [\r\n  {\r\n    id: 1,\r\n    title: 'Mediterranean Salad Bowl',\r\n    image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd',\r\n    calories: 320,\r\n    dietType: 'Low Calorie',\r\n    readyInMinutes: 15,\r\n    servings: 2,\r\n    summary: 'Fresh vegetables with olive oil and feta cheese for a perfect light lunch.'\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Quinoa Protein Bowl',\r\n    image: 'https://images.unsplash.com/photo-1490645935967-10de6ba17061',\r\n    calories: 450,\r\n    dietType: 'High Protein',\r\n    readyInMinutes: 25,\r\n    servings: 2,\r\n    summary: 'A balanced meal with quinoa, grilled chicken, and fresh vegetables.'\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Berry Smoothie Bowl',\r\n    image: 'https://images.unsplash.com/photo-1495214783159-3503fd1b572d',\r\n    calories: 280,\r\n    dietType: 'Vegan',\r\n    readyInMinutes: 10,\r\n    servings: 1,\r\n    summary: 'Refreshing smoothie bowl with mixed berries, banana, and chia seeds.'\r\n  }\r\n];\r\n\r\n// API Service for recipe operations\r\nconst RecipeService = {\r\n  // Search recipes with complex filtering\r\n  searchRecipes: async (params) => {\r\n    try {\r\n      const response = await apiClient.get('/recipes/complexSearch', {\r\n        params: {\r\n          ...params,\r\n          addRecipeNutrition: true,\r\n          number: 12\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching recipes:', error);\r\n      // Return mock data if API fails\r\n      return { results: mockRecipes };\r\n    }\r\n  },\r\n\r\n  // Get recipes by ingredients\r\n  getRecipesByIngredients: async (ingredients, number = 10) => {\r\n    try {\r\n      const response = await apiClient.get('/recipes/findByIngredients', {\r\n        params: {\r\n          ingredients: ingredients.join(','),\r\n          number\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching recipes by ingredients:', error);\r\n      return mockRecipes;\r\n    }\r\n  },\r\n\r\n  // Get recipes by nutrients\r\n  getRecipesByNutrients: async (params) => {\r\n    try {\r\n      const response = await apiClient.get('/recipes/findByNutrients', {\r\n        params: {\r\n          ...params,\r\n          number: 10\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching recipes by nutrients:', error);\r\n      return mockRecipes;\r\n    }\r\n  },\r\n\r\n  // Get recipe details by ID\r\n  getRecipeDetails: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/recipes/${id}/information`, {\r\n        params: {\r\n          includeNutrition: true\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching recipe details for ID ${id}:`, error);\r\n      // Return a mock recipe if API fails\r\n      return mockRecipes.find(recipe => recipe.id === id) || mockRecipes[0];\r\n    }\r\n  },\r\n\r\n  // Get personalized recommendations based on user profile\r\n  getPersonalizedRecipes: async (userProfile) => {\r\n    // Extract relevant user data for recipe recommendations\r\n    const { diet, intolerances, excludeIngredients, targetCalories } = userProfile;\r\n    \r\n    try {\r\n      const response = await apiClient.get('/recipes/complexSearch', {\r\n        params: {\r\n          diet,\r\n          intolerances,\r\n          excludeIngredients,\r\n          maxCalories: targetCalories,\r\n          addRecipeNutrition: true,\r\n          number: 6,\r\n          sort: 'random'\r\n        }\r\n      });\r\n      return response.data.results;\r\n    } catch (error) {\r\n      console.error('Error fetching personalized recipes:', error);\r\n      return mockRecipes;\r\n    }\r\n  }\r\n};\r\n\r\nexport default RecipeService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}