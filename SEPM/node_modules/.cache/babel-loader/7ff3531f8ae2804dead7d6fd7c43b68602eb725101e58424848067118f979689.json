{"ast":null,"code":"// src/services/apiService.js\nconst API_KEY = '1c2cb4541bed45058be2c24ef6efe661';\nconst BASE_URL = 'https://api.spoonacular.com';\n\n// Rate limiting variables\nlet lastCallTime = null;\nconst MIN_CALL_INTERVAL = 1000; // Minimum 1 second between API calls\n\n// Helper function to respect rate limits\nconst throttledFetch = async url => {\n  // Check if we need to wait before making another call\n  if (lastCallTime) {\n    const timeSinceLastCall = Date.now() - lastCallTime;\n    if (timeSinceLastCall < MIN_CALL_INTERVAL) {\n      // Wait for the remaining time\n      await new Promise(resolve => setTimeout(resolve, MIN_CALL_INTERVAL - timeSinceLastCall));\n    }\n  }\n\n  // Make the API call\n  lastCallTime = Date.now();\n  return fetch(url);\n};\n\n// Build query URL with parameters\nconst buildUrl = (endpoint, params = {}) => {\n  const url = new URL(`${BASE_URL}${endpoint}`);\n\n  // Add API key to params\n  url.searchParams.append('apiKey', API_KEY);\n\n  // Add other params\n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      url.searchParams.append(key, value);\n    }\n  });\n  return url;\n};\n\n// Search recipes\nexport const searchRecipes = async (query, params = {}) => {\n  try {\n    const url = buildUrl('/recipes/complexSearch', {\n      query,\n      addRecipeInformation: true,\n      fillIngredients: true,\n      ...params\n    });\n    const response = await throttledFetch(url);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to search recipes');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error searching recipes:', error);\n    throw error;\n  }\n};\n\n// Get recipe by ID\nexport const getRecipeById = async id => {\n  try {\n    const url = buildUrl(`/recipes/${id}/information`, {\n      includeNutrition: true\n    });\n    const response = await throttledFetch(url);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to get recipe');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error getting recipe:', error);\n    throw error;\n  }\n};\n\n// Get similar recipes\nexport const getSimilarRecipes = async id => {\n  try {\n    const url = buildUrl(`/recipes/${id}/similar`, {\n      number: 4\n    });\n    const response = await throttledFetch(url);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to get similar recipes');\n    }\n    const data = await response.json();\n\n    // Fetch full details for each similar recipe\n    const detailedRecipes = await Promise.all(data.map(async recipe => {\n      try {\n        return await getRecipeById(recipe.id);\n      } catch (error) {\n        console.error(`Error fetching details for recipe ${recipe.id}:`, error);\n        return recipe; // Return basic info if detailed fetch fails\n      }\n    }));\n    return detailedRecipes;\n  } catch (error) {\n    console.error('Error getting similar recipes:', error);\n    throw error;\n  }\n};\n\n// Get recipe recommendations based on user profile\nexport const getRecommendations = async (healthProfile, params = {}) => {\n  try {\n    var _healthProfile$dietar, _healthProfile$allerg;\n    // Build parameters based on health profile\n    const recommendationParams = {\n      ...params\n    };\n\n    // Add dietary restrictions\n    if ((healthProfile === null || healthProfile === void 0 ? void 0 : (_healthProfile$dietar = healthProfile.dietaryRestrictions) === null || _healthProfile$dietar === void 0 ? void 0 : _healthProfile$dietar.length) > 0) {\n      recommendationParams.diet = healthProfile.dietaryRestrictions[0]; // API only accepts one diet\n    }\n\n    // Add allergies/intolerances\n    if ((healthProfile === null || healthProfile === void 0 ? void 0 : (_healthProfile$allerg = healthProfile.allergies) === null || _healthProfile$allerg === void 0 ? void 0 : _healthProfile$allerg.length) > 0) {\n      recommendationParams.intolerances = healthProfile.allergies.join(',');\n    }\n\n    // Set calorie range if target calories are available\n    if (healthProfile !== null && healthProfile !== void 0 && healthProfile.targetCalories) {\n      const targetCal = healthProfile.targetCalories;\n      recommendationParams.minCalories = Math.round(targetCal * 0.9);\n      recommendationParams.maxCalories = Math.round(targetCal * 1.1);\n    }\n\n    // Other recommendation parameters\n    recommendationParams.sort = 'random';\n    recommendationParams.number = params.number || 10;\n    return await searchRecipes('', recommendationParams);\n  } catch (error) {\n    console.error('Error getting recommendations:', error);\n    throw error;\n  }\n};\n\n// Get recipes by ingredients\nexport const getRecipesByIngredients = async (ingredients, params = {}) => {\n  try {\n    const url = buildUrl('/recipes/findByIngredients', {\n      ingredients: ingredients.join(','),\n      number: params.number || 10,\n      ranking: 2,\n      // Maximize used ingredients\n      ...params\n    });\n    const response = await throttledFetch(url);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to find recipes by ingredients');\n    }\n    const data = await response.json();\n\n    // Get detailed information for each recipe\n    const recipeDetails = await Promise.all(data.map(async recipe => {\n      try {\n        return await getRecipeById(recipe.id);\n      } catch (error) {\n        console.error(`Error fetching details for recipe ${recipe.id}:`, error);\n        return recipe; // Return basic info if detailed fetch fails\n      }\n    }));\n    return recipeDetails;\n  } catch (error) {\n    console.error('Error finding recipes by ingredients:', error);\n    throw error;\n  }\n};\nexport default {\n  searchRecipes,\n  getRecipeById,\n  getSimilarRecipes,\n  getRecommendations,\n  getRecipesByIngredients\n};","map":{"version":3,"names":["API_KEY","BASE_URL","lastCallTime","MIN_CALL_INTERVAL","throttledFetch","url","timeSinceLastCall","Date","now","Promise","resolve","setTimeout","fetch","buildUrl","endpoint","params","URL","searchParams","append","Object","entries","forEach","key","value","undefined","searchRecipes","query","addRecipeInformation","fillIngredients","response","ok","errorData","json","Error","message","data","error","console","getRecipeById","id","includeNutrition","getSimilarRecipes","number","detailedRecipes","all","map","recipe","getRecommendations","healthProfile","_healthProfile$dietar","_healthProfile$allerg","recommendationParams","dietaryRestrictions","length","diet","allergies","intolerances","join","targetCalories","targetCal","minCalories","Math","round","maxCalories","sort","getRecipesByIngredients","ingredients","ranking","recipeDetails"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["// src/services/apiService.js\r\nconst API_KEY = '1c2cb4541bed45058be2c24ef6efe661';\r\nconst BASE_URL = 'https://api.spoonacular.com';\r\n\r\n// Rate limiting variables\r\nlet lastCallTime = null;\r\nconst MIN_CALL_INTERVAL = 1000; // Minimum 1 second between API calls\r\n\r\n// Helper function to respect rate limits\r\nconst throttledFetch = async (url) => {\r\n  // Check if we need to wait before making another call\r\n  if (lastCallTime) {\r\n    const timeSinceLastCall = Date.now() - lastCallTime;\r\n    if (timeSinceLastCall < MIN_CALL_INTERVAL) {\r\n      // Wait for the remaining time\r\n      await new Promise(resolve => setTimeout(resolve, MIN_CALL_INTERVAL - timeSinceLastCall));\r\n    }\r\n  }\r\n  \r\n  // Make the API call\r\n  lastCallTime = Date.now();\r\n  return fetch(url);\r\n};\r\n\r\n// Build query URL with parameters\r\nconst buildUrl = (endpoint, params = {}) => {\r\n  const url = new URL(`${BASE_URL}${endpoint}`);\r\n  \r\n  // Add API key to params\r\n  url.searchParams.append('apiKey', API_KEY);\r\n  \r\n  // Add other params\r\n  Object.entries(params).forEach(([key, value]) => {\r\n    if (value !== undefined && value !== null && value !== '') {\r\n      url.searchParams.append(key, value);\r\n    }\r\n  });\r\n  \r\n  return url;\r\n};\r\n\r\n// Search recipes\r\nexport const searchRecipes = async (query, params = {}) => {\r\n  try {\r\n    const url = buildUrl('/recipes/complexSearch', {\r\n      query,\r\n      addRecipeInformation: true,\r\n      fillIngredients: true,\r\n      ...params\r\n    });\r\n    \r\n    const response = await throttledFetch(url);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to search recipes');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error searching recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get recipe by ID\r\nexport const getRecipeById = async (id) => {\r\n  try {\r\n    const url = buildUrl(`/recipes/${id}/information`, {\r\n      includeNutrition: true\r\n    });\r\n    \r\n    const response = await throttledFetch(url);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to get recipe');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error getting recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get similar recipes\r\nexport const getSimilarRecipes = async (id) => {\r\n  try {\r\n    const url = buildUrl(`/recipes/${id}/similar`, {\r\n      number: 4\r\n    });\r\n    \r\n    const response = await throttledFetch(url);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to get similar recipes');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Fetch full details for each similar recipe\r\n    const detailedRecipes = await Promise.all(\r\n      data.map(async (recipe) => {\r\n        try {\r\n          return await getRecipeById(recipe.id);\r\n        } catch (error) {\r\n          console.error(`Error fetching details for recipe ${recipe.id}:`, error);\r\n          return recipe; // Return basic info if detailed fetch fails\r\n        }\r\n      })\r\n    );\r\n    \r\n    return detailedRecipes;\r\n  } catch (error) {\r\n    console.error('Error getting similar recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get recipe recommendations based on user profile\r\nexport const getRecommendations = async (healthProfile, params = {}) => {\r\n  try {\r\n    // Build parameters based on health profile\r\n    const recommendationParams = { ...params };\r\n    \r\n    // Add dietary restrictions\r\n    if (healthProfile?.dietaryRestrictions?.length > 0) {\r\n      recommendationParams.diet = healthProfile.dietaryRestrictions[0]; // API only accepts one diet\r\n    }\r\n    \r\n    // Add allergies/intolerances\r\n    if (healthProfile?.allergies?.length > 0) {\r\n      recommendationParams.intolerances = healthProfile.allergies.join(',');\r\n    }\r\n    \r\n    // Set calorie range if target calories are available\r\n    if (healthProfile?.targetCalories) {\r\n      const targetCal = healthProfile.targetCalories;\r\n      recommendationParams.minCalories = Math.round(targetCal * 0.9);\r\n      recommendationParams.maxCalories = Math.round(targetCal * 1.1);\r\n    }\r\n    \r\n    // Other recommendation parameters\r\n    recommendationParams.sort = 'random';\r\n    recommendationParams.number = params.number || 10;\r\n    \r\n    return await searchRecipes('', recommendationParams);\r\n  } catch (error) {\r\n    console.error('Error getting recommendations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get recipes by ingredients\r\nexport const getRecipesByIngredients = async (ingredients, params = {}) => {\r\n  try {\r\n    const url = buildUrl('/recipes/findByIngredients', {\r\n      ingredients: ingredients.join(','),\r\n      number: params.number || 10,\r\n      ranking: 2, // Maximize used ingredients\r\n      ...params\r\n    });\r\n    \r\n    const response = await throttledFetch(url);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to find recipes by ingredients');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Get detailed information for each recipe\r\n    const recipeDetails = await Promise.all(\r\n      data.map(async (recipe) => {\r\n        try {\r\n          return await getRecipeById(recipe.id);\r\n        } catch (error) {\r\n          console.error(`Error fetching details for recipe ${recipe.id}:`, error);\r\n          return recipe; // Return basic info if detailed fetch fails\r\n        }\r\n      })\r\n    );\r\n    \r\n    return recipeDetails;\r\n  } catch (error) {\r\n    console.error('Error finding recipes by ingredients:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  searchRecipes,\r\n  getRecipeById,\r\n  getSimilarRecipes,\r\n  getRecommendations,\r\n  getRecipesByIngredients\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}