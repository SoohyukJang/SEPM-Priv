{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SoohyukJANG\\\\Documents\\\\GitHub\\\\SEPM-Priv\\\\SEPM\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile, sendPasswordResetEmail, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { doc, setDoc, getDoc, updateDoc, serverTimestamp, collection, query, where, getDocs } from 'firebase/firestore';\nimport { auth, db } from '../firebase/config';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Clear error after 5 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => setError(''), 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  // Register a new user\n  const signup = async (email, password, displayName, phoneNumber = null) => {\n    try {\n      setError('');\n      setLoading(true);\n\n      // Create user in Firebase Auth\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Update profile with display name\n      await updateProfile(user, {\n        displayName\n      });\n\n      // Create user document in Firestore with a specific ID matching the auth UID\n      const userData = {\n        uid: user.uid,\n        email,\n        displayName,\n        phoneNumber: phoneNumber || null,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n        preferences: {\n          theme: 'light',\n          emailNotifications: true\n        },\n        healthProfile: null\n      };\n\n      // Create document with the user's UID as the document ID\n      await setDoc(doc(db, 'users', user.uid), userData);\n      console.log('User document created in Firestore with ID:', user.uid);\n\n      // Return the user object\n      return user;\n    } catch (err) {\n      console.error('Signup error:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign in with Google\n  const signInWithGoogle = async () => {\n    try {\n      setError('');\n      setLoading(true);\n      const provider = new GoogleAuthProvider();\n      const result = await signInWithPopup(auth, provider);\n      const user = result.user;\n\n      // Check if user document exists in Firestore\n      const userDocRef = doc(db, 'users', user.uid);\n      const userDoc = await getDoc(userDocRef);\n\n      // If not, create a new user document\n      if (!userDoc.exists()) {\n        const userData = {\n          uid: user.uid,\n          email: user.email,\n          displayName: user.displayName,\n          phoneNumber: user.phoneNumber || null,\n          photoURL: user.photoURL,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          preferences: {\n            theme: 'light',\n            emailNotifications: true\n          },\n          healthProfile: null\n        };\n        await setDoc(userDocRef, userData);\n        console.log('Google user document created in Firestore with ID:', user.uid);\n      } else {\n        // Update lastLogin for existing user\n        await updateDoc(userDocRef, {\n          lastLogin: serverTimestamp(),\n          updatedAt: serverTimestamp()\n        });\n        console.log('Existing Google user logged in, document updated:', user.uid);\n      }\n      return user;\n    } catch (err) {\n      console.error('Google sign in error:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Log in an existing user\n  const login = async (email, password) => {\n    try {\n      setError('');\n      setLoading(true);\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Update the user's lastLogin in Firestore\n      const userDocRef = doc(db, 'users', user.uid);\n      await updateDoc(userDocRef, {\n        lastLogin: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n      console.log('User logged in, document updated:', user.uid);\n      return user;\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Log out the current user\n  const logout = async () => {\n    try {\n      setError('');\n      await signOut(auth);\n      setUserProfile(null);\n      console.log('User logged out');\n    } catch (err) {\n      console.error('Logout error:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Reset password\n  const resetPassword = async email => {\n    try {\n      setError('');\n      setLoading(true);\n      await sendPasswordResetEmail(auth, email);\n      console.log('Password reset email sent to:', email);\n    } catch (err) {\n      console.error('Reset password error:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get user profile data\n  const getUserProfile = async userId => {\n    try {\n      const userDocRef = doc(db, 'users', userId);\n      const userDoc = await getDoc(userDocRef);\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        console.log('User profile fetched:', userData);\n        return userData;\n      }\n      console.log('User profile not found for ID:', userId);\n      return null;\n    } catch (err) {\n      console.error('Get user profile error:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update current user profile\n  const updateUserProfile = async userData => {\n    if (!currentUser) {\n      setError('No user is logged in');\n      return false;\n    }\n    try {\n      setLoading(true);\n      const userRef = doc(db, 'users', currentUser.uid);\n\n      // Add timestamp for updatedAt\n      const updatedUserData = {\n        ...userData,\n        updatedAt: serverTimestamp()\n      };\n      await updateDoc(userRef, updatedUserData);\n\n      // Update display name in Auth if provided\n      if (userData.displayName) {\n        await updateProfile(currentUser, {\n          displayName: userData.displayName\n        });\n      }\n\n      // Refresh the local user profile state\n      const updatedProfile = await getUserProfile(currentUser.uid);\n      setUserProfile(updatedProfile);\n      console.log('User profile updated:', currentUser.uid);\n      return true;\n    } catch (err) {\n      console.error('Update profile error:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch user data when the current user changes\n  useEffect(() => {\n    const fetchUserData = async user => {\n      if (user) {\n        try {\n          const profile = await getUserProfile(user.uid);\n          setUserProfile(profile);\n        } catch (err) {\n          console.error('Error fetching user data:', err);\n        }\n      }\n    };\n\n    // Listen for auth state changes\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      console.log('Auth state changed. Current user:', user === null || user === void 0 ? void 0 : user.email);\n      setCurrentUser(user);\n      if (user) {\n        await fetchUserData(user);\n      } else {\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n\n    // Cleanup subscription\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    userProfile,\n    loading,\n    error,\n    signup,\n    login,\n    logout,\n    resetPassword,\n    getUserProfile,\n    updateUserProfile,\n    signInWithGoogle\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"XH+CU+cZ3NxRd5f9yDbjmB+XY/Q=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","sendPasswordResetEmail","GoogleAuthProvider","signInWithPopup","doc","setDoc","getDoc","updateDoc","serverTimestamp","collection","query","where","getDocs","auth","db","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","userProfile","setUserProfile","loading","setLoading","error","setError","timer","setTimeout","clearTimeout","signup","email","password","displayName","phoneNumber","userCredential","user","userData","uid","createdAt","updatedAt","preferences","theme","emailNotifications","healthProfile","console","log","err","message","signInWithGoogle","provider","result","userDocRef","userDoc","exists","photoURL","lastLogin","login","logout","resetPassword","getUserProfile","userId","data","updateUserProfile","userRef","updatedUserData","updatedProfile","fetchUserData","profile","unsubscribe","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged,\r\n  updateProfile,\r\n  sendPasswordResetEmail,\r\n  GoogleAuthProvider,\r\n  signInWithPopup\r\n} from 'firebase/auth';\r\nimport { \r\n  doc, \r\n  setDoc, \r\n  getDoc, \r\n  updateDoc,\r\n  serverTimestamp, \r\n  collection,\r\n  query,\r\n  where,\r\n  getDocs\r\n} from 'firebase/firestore';\r\nimport { auth, db } from '../firebase/config';\r\n\r\n// Create context\r\nconst AuthContext = createContext();\r\n\r\n// Hook to use the auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// Provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // Clear error after 5 seconds\r\n  useEffect(() => {\r\n    if (error) {\r\n      const timer = setTimeout(() => setError(''), 5000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [error]);\r\n\r\n  // Register a new user\r\n  const signup = async (email, password, displayName, phoneNumber = null) => {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      \r\n      // Create user in Firebase Auth\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n      \r\n      // Update profile with display name\r\n      await updateProfile(user, { displayName });\r\n      \r\n      // Create user document in Firestore with a specific ID matching the auth UID\r\n      const userData = {\r\n        uid: user.uid,\r\n        email,\r\n        displayName,\r\n        phoneNumber: phoneNumber || null,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n        preferences: {\r\n          theme: 'light',\r\n          emailNotifications: true\r\n        },\r\n        healthProfile: null\r\n      };\r\n      \r\n      // Create document with the user's UID as the document ID\r\n      await setDoc(doc(db, 'users', user.uid), userData);\r\n      \r\n      console.log('User document created in Firestore with ID:', user.uid);\r\n      \r\n      // Return the user object\r\n      return user;\r\n    } catch (err) {\r\n      console.error('Signup error:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sign in with Google\r\n  const signInWithGoogle = async () => {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      \r\n      const provider = new GoogleAuthProvider();\r\n      const result = await signInWithPopup(auth, provider);\r\n      const user = result.user;\r\n      \r\n      // Check if user document exists in Firestore\r\n      const userDocRef = doc(db, 'users', user.uid);\r\n      const userDoc = await getDoc(userDocRef);\r\n      \r\n      // If not, create a new user document\r\n      if (!userDoc.exists()) {\r\n        const userData = {\r\n          uid: user.uid,\r\n          email: user.email,\r\n          displayName: user.displayName,\r\n          phoneNumber: user.phoneNumber || null,\r\n          photoURL: user.photoURL,\r\n          createdAt: serverTimestamp(),\r\n          updatedAt: serverTimestamp(),\r\n          preferences: {\r\n            theme: 'light',\r\n            emailNotifications: true\r\n          },\r\n          healthProfile: null\r\n        };\r\n        \r\n        await setDoc(userDocRef, userData);\r\n        console.log('Google user document created in Firestore with ID:', user.uid);\r\n      } else {\r\n        // Update lastLogin for existing user\r\n        await updateDoc(userDocRef, {\r\n          lastLogin: serverTimestamp(),\r\n          updatedAt: serverTimestamp()\r\n        });\r\n        console.log('Existing Google user logged in, document updated:', user.uid);\r\n      }\r\n      \r\n      return user;\r\n    } catch (err) {\r\n      console.error('Google sign in error:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Log in an existing user\r\n  const login = async (email, password) => {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n      \r\n      // Update the user's lastLogin in Firestore\r\n      const userDocRef = doc(db, 'users', user.uid);\r\n      await updateDoc(userDocRef, {\r\n        lastLogin: serverTimestamp(),\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      \r\n      console.log('User logged in, document updated:', user.uid);\r\n      return user;\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Log out the current user\r\n  const logout = async () => {\r\n    try {\r\n      setError('');\r\n      await signOut(auth);\r\n      setUserProfile(null);\r\n      console.log('User logged out');\r\n    } catch (err) {\r\n      console.error('Logout error:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (email) => {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await sendPasswordResetEmail(auth, email);\r\n      console.log('Password reset email sent to:', email);\r\n    } catch (err) {\r\n      console.error('Reset password error:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get user profile data\r\n  const getUserProfile = async (userId) => {\r\n    try {\r\n      const userDocRef = doc(db, 'users', userId);\r\n      const userDoc = await getDoc(userDocRef);\r\n      \r\n      if (userDoc.exists()) {\r\n        const userData = userDoc.data();\r\n        console.log('User profile fetched:', userData);\r\n        return userData;\r\n      }\r\n      \r\n      console.log('User profile not found for ID:', userId);\r\n      return null;\r\n    } catch (err) {\r\n      console.error('Get user profile error:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Update current user profile\r\n  const updateUserProfile = async (userData) => {\r\n    if (!currentUser) {\r\n      setError('No user is logged in');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const userRef = doc(db, 'users', currentUser.uid);\r\n      \r\n      // Add timestamp for updatedAt\r\n      const updatedUserData = {\r\n        ...userData,\r\n        updatedAt: serverTimestamp()\r\n      };\r\n      \r\n      await updateDoc(userRef, updatedUserData);\r\n      \r\n      // Update display name in Auth if provided\r\n      if (userData.displayName) {\r\n        await updateProfile(currentUser, { displayName: userData.displayName });\r\n      }\r\n      \r\n      // Refresh the local user profile state\r\n      const updatedProfile = await getUserProfile(currentUser.uid);\r\n      setUserProfile(updatedProfile);\r\n      \r\n      console.log('User profile updated:', currentUser.uid);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Update profile error:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch user data when the current user changes\r\n  useEffect(() => {\r\n    const fetchUserData = async (user) => {\r\n      if (user) {\r\n        try {\r\n          const profile = await getUserProfile(user.uid);\r\n          setUserProfile(profile);\r\n        } catch (err) {\r\n          console.error('Error fetching user data:', err);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Listen for auth state changes\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      console.log('Auth state changed. Current user:', user?.email);\r\n      setCurrentUser(user);\r\n      \r\n      if (user) {\r\n        await fetchUserData(user);\r\n      } else {\r\n        setUserProfile(null);\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n    \r\n    // Cleanup subscription\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    userProfile,\r\n    loading,\r\n    error,\r\n    signup,\r\n    login,\r\n    logout,\r\n    resetPassword,\r\n    getUserProfile,\r\n    updateUserProfile,\r\n    signInWithGoogle\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}