{"ast":null,"code":"import { getFirestore, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';\nimport { app } from '../firebase/config';\nconst API_KEY = 'eeb775beabdd459eb5f8e5983978fff1';\nconst db = getFirestore(app);\n\n// Sample data to use when API calls fail\nconst sampleRecipes = [{\n  id: 715538,\n  title: \"What to make for dinner tonight?? Bruschetta Style Pork & Pasta\",\n  image: \"https://img.spoonacular.com/recipes/715538-312x231.jpg\",\n  readyInMinutes: 45,\n  servings: 2,\n  vegetarian: true,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 716429,\n  title: \"Simple Skillet Lasagna\",\n  image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\n  readyInMinutes: 35,\n  servings: 4,\n  vegetarian: false,\n  vegan: false,\n  glutenFree: false,\n  dairyFree: false\n}, {\n  id: 715497,\n  title: \"Berry Banana Breakfast Smoothie\",\n  image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\n  readyInMinutes: 5,\n  servings: 1,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}, {\n  id: 721146,\n  title: \"Homemade Strawberry Lemonade\",\n  image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\n  readyInMinutes: 15,\n  servings: 8,\n  vegetarian: true,\n  vegan: true,\n  glutenFree: true,\n  dairyFree: true\n}\n// More sample recipes...\n];\n\n// Filter sample recipes based on user filters\nconst filterSampleRecipes = filters => {\n  let filtered = [...sampleRecipes];\n  if (filters.query) {\n    const query = filters.query.toLowerCase();\n    filtered = filtered.filter(recipe => recipe.title.toLowerCase().includes(query));\n  }\n  if (filters.diet === 'vegetarian') {\n    filtered = filtered.filter(recipe => recipe.vegetarian);\n  } else if (filters.diet === 'vegan') {\n    filtered = filtered.filter(recipe => recipe.vegan);\n  } else if (filters.diet === 'gluten free') {\n    filtered = filtered.filter(recipe => recipe.glutenFree);\n  } else if (filters.diet === 'dairy free') {\n    filtered = filtered.filter(recipe => recipe.dairyFree);\n  }\n  if (filters.maxReadyTime) {\n    filtered = filtered.filter(recipe => recipe.readyInMinutes <= filters.maxReadyTime);\n  }\n  return filtered;\n};\nexport const fetchRecipes = async filters => {\n  try {\n    const {\n      query,\n      cuisine,\n      diet,\n      intolerances,\n      maxReadyTime,\n      sort\n    } = filters;\n\n    // Very basic URL with minimal parameters\n    let url = \"https://api.spoonacular.com/recipes/complexSearch?apiKey=\" + API_KEY;\n    url += \"&number=10\";\n\n    // Only add query parameter if provided\n    if (query) url += \"&query=\" + encodeURIComponent(query);\n    console.log(\"Fetching recipes with simplified URL:\", url);\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.warn(\"API request failed with status: \" + response.status);\n        console.warn(\"Using offline sample data\");\n        return filterSampleRecipes(filters);\n      }\n      const data = await response.json();\n      console.log(\"API response received:\", data);\n      return data.results || [];\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      console.warn(\"Using offline sample data\");\n      return filterSampleRecipes(filters);\n    }\n  } catch (error) {\n    console.error(\"Error in fetchRecipes:\", error);\n    return filterSampleRecipes(filters);\n  }\n};\nexport const searchRecipes = fetchRecipes;\nexport const fetchRecipeById = async recipeId => {\n  return new Promise((resolve, reject) => {\n    try {\n      const url = \"https://api.spoonacular.com/recipes/\" + recipeId + \"/information?apiKey=\" + API_KEY + \"&includeNutrition=true\";\n      console.log(\"Fetching recipe details from URL:\", url);\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const data = JSON.parse(xhr.responseText);\n            resolve(data);\n          } catch (error) {\n            console.error(\"Error parsing API response:\", error);\n            // Try to find in sample data\n            const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\n            if (recipe) {\n              resolve(recipe);\n            } else {\n              reject(new Error(\"Recipe not found\"));\n            }\n          }\n        } else {\n          console.error(\"API request failed with status:\", xhr.status);\n          console.error(\"Response text:\", xhr.responseText);\n          // Try to find in sample data\n          const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\n          if (recipe) {\n            resolve(recipe);\n          } else {\n            reject(new Error(\"Recipe not found\"));\n          }\n        }\n      };\n      xhr.onerror = function () {\n        console.error(\"Network error occurred\");\n        // Try to find in sample data\n        const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\n        if (recipe) {\n          resolve(recipe);\n        } else {\n          reject(new Error(\"Recipe not found\"));\n        }\n      };\n      xhr.send();\n    } catch (error) {\n      console.error('Error in fetchRecipeById:', error);\n      reject(error);\n    }\n  });\n};\nexport const getRecipeById = fetchRecipeById;\nexport const getSimilarRecipes = async recipeId => {\n  return new Promise((resolve, reject) => {\n    try {\n      const url = \"https://api.spoonacular.com/recipes/\" + recipeId + \"/similar?apiKey=\" + API_KEY + \"&number=4\";\n      console.log(\"Fetching similar recipes from URL:\", url);\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const similarRecipes = JSON.parse(xhr.responseText);\n\n            // Get details for each similar recipe\n            Promise.all(similarRecipes.map(recipe => fetchRecipeById(recipe.id))).then(detailedRecipes => {\n              resolve(detailedRecipes);\n            }).catch(error => {\n              console.error(\"Error fetching detailed recipes:\", error);\n              // Return random sample data as fallback\n              const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n              resolve(shuffled.slice(0, 4));\n            });\n          } catch (error) {\n            console.error(\"Error parsing API response:\", error);\n            // Return random sample data as fallback\n            const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n            resolve(shuffled.slice(0, 4));\n          }\n        } else {\n          console.error(\"API request failed with status:\", xhr.status);\n          console.error(\"Response text:\", xhr.responseText);\n          // Return random sample data as fallback\n          const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n          resolve(shuffled.slice(0, 4));\n        }\n      };\n      xhr.onerror = function () {\n        console.error(\"Network error occurred\");\n        // Return random sample data as fallback\n        const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n        resolve(shuffled.slice(0, 4));\n      };\n      xhr.send();\n    } catch (error) {\n      console.error('Error in getSimilarRecipes:', error);\n      // Return random sample data as fallback\n      const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\n      resolve(shuffled.slice(0, 4));\n    }\n  });\n};\nexport const getRecommendations = async userProfile => {\n  try {\n    // Default parameters if user profile is not available\n    let diet = '';\n    let intolerances = [];\n    let query = '';\n\n    // If user profile exists, use it to customize recommendations\n    if (userProfile) {\n      if (userProfile.goal === 'Weight Loss') {\n        diet = 'low-calorie';\n      } else if (userProfile.goal === 'Build Muscle') {\n        diet = 'high-protein';\n      }\n      intolerances = userProfile.allergies || [];\n    }\n\n    // Create filters object for fetching recipes\n    const filters = {\n      query,\n      diet,\n      intolerances,\n      sort: 'popularity',\n      maxReadyTime: 60\n    };\n    return await fetchRecipes(filters);\n  } catch (error) {\n    console.error('Error getting recommendations:', error);\n    return filterSampleRecipes({});\n  }\n};\nexport const saveRecipe = async (userId, recipe) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      // Create user document if it doesn't exist\n      await setDoc(userRef, {\n        savedRecipes: [recipe]\n      });\n    } else {\n      // Add recipe to existing savedRecipes array\n      await updateDoc(userRef, {\n        savedRecipes: arrayUnion(recipe)\n      });\n    }\n  } catch (error) {\n    console.error('Error saving recipe:', error);\n    throw error;\n  }\n};\nexport const removeRecipe = async (userId, recipeId) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      const savedRecipes = userDoc.data().savedRecipes || [];\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\n      if (recipeToRemove) {\n        await updateDoc(userRef, {\n          savedRecipes: arrayRemove(recipeToRemove)\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Error removing recipe:', error);\n    throw error;\n  }\n};\nexport const getSavedRecipes = async userId => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data().savedRecipes || [];\n    }\n    return [];\n  } catch (error) {\n    console.error('Error getting saved recipes:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getFirestore","doc","getDoc","setDoc","updateDoc","arrayUnion","arrayRemove","app","API_KEY","db","sampleRecipes","id","title","image","readyInMinutes","servings","vegetarian","vegan","glutenFree","dairyFree","filterSampleRecipes","filters","filtered","query","toLowerCase","filter","recipe","includes","diet","maxReadyTime","fetchRecipes","cuisine","intolerances","sort","url","encodeURIComponent","console","log","response","fetch","ok","warn","status","data","json","results","error","searchRecipes","fetchRecipeById","recipeId","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","onload","JSON","parse","responseText","find","r","parseInt","Error","onerror","send","getRecipeById","getSimilarRecipes","similarRecipes","all","map","then","detailedRecipes","catch","shuffled","Math","random","slice","getRecommendations","userProfile","goal","allergies","saveRecipe","userId","userRef","userDoc","exists","savedRecipes","removeRecipe","recipeToRemove","getSavedRecipes"],"sources":["C:/Users/SoohyukJANG/Documents/GitHub/SEPM-Priv/SEPM/src/services/apiService.js"],"sourcesContent":["import { getFirestore, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove} from 'firebase/firestore';\r\nimport { app } from '../firebase/config';\r\n\r\nconst API_KEY = 'eeb775beabdd459eb5f8e5983978fff1';\r\nconst db = getFirestore(app);\r\n\r\n// Sample data to use when API calls fail\r\nconst sampleRecipes = [\r\n  {\r\n    id: 715538,\r\n    title: \"What to make for dinner tonight?? Bruschetta Style Pork & Pasta\",\r\n    image: \"https://img.spoonacular.com/recipes/715538-312x231.jpg\",\r\n    readyInMinutes: 45,\r\n    servings: 2,\r\n    vegetarian: true,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 716429,\r\n    title: \"Simple Skillet Lasagna\",\r\n    image: \"https://spoonacular.com/recipeImages/716429-312x231.jpg\",\r\n    readyInMinutes: 35,\r\n    servings: 4,\r\n    vegetarian: false,\r\n    vegan: false,\r\n    glutenFree: false,\r\n    dairyFree: false\r\n  },\r\n  {\r\n    id: 715497,\r\n    title: \"Berry Banana Breakfast Smoothie\",\r\n    image: \"https://spoonacular.com/recipeImages/715497-312x231.jpg\",\r\n    readyInMinutes: 5,\r\n    servings: 1,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  {\r\n    id: 721146,\r\n    title: \"Homemade Strawberry Lemonade\",\r\n    image: \"https://spoonacular.com/recipeImages/721146-312x231.jpg\",\r\n    readyInMinutes: 15,\r\n    servings: 8,\r\n    vegetarian: true,\r\n    vegan: true,\r\n    glutenFree: true,\r\n    dairyFree: true\r\n  },\r\n  // More sample recipes...\r\n];\r\n\r\n// Filter sample recipes based on user filters\r\nconst filterSampleRecipes = (filters) => {\r\n  let filtered = [...sampleRecipes];\r\n  \r\n  if (filters.query) {\r\n    const query = filters.query.toLowerCase();\r\n    filtered = filtered.filter(recipe => \r\n      recipe.title.toLowerCase().includes(query)\r\n    );\r\n  }\r\n  \r\n  if (filters.diet === 'vegetarian') {\r\n    filtered = filtered.filter(recipe => recipe.vegetarian);\r\n  } else if (filters.diet === 'vegan') {\r\n    filtered = filtered.filter(recipe => recipe.vegan);\r\n  } else if (filters.diet === 'gluten free') {\r\n    filtered = filtered.filter(recipe => recipe.glutenFree);\r\n  } else if (filters.diet === 'dairy free') {\r\n    filtered = filtered.filter(recipe => recipe.dairyFree);\r\n  }\r\n  \r\n  if (filters.maxReadyTime) {\r\n    filtered = filtered.filter(recipe => recipe.readyInMinutes <= filters.maxReadyTime);\r\n  }\r\n  \r\n  return filtered;\r\n};\r\n\r\nexport const fetchRecipes = async (filters) => {\r\n  try {\r\n    const { query, cuisine, diet, intolerances, maxReadyTime, sort } = filters;\r\n    \r\n    // Very basic URL with minimal parameters\r\n    let url = \"https://api.spoonacular.com/recipes/complexSearch?apiKey=\" + API_KEY;\r\n    url += \"&number=10\";\r\n    \r\n    // Only add query parameter if provided\r\n    if (query) url += \"&query=\" + encodeURIComponent(query);\r\n    \r\n    console.log(\"Fetching recipes with simplified URL:\", url);\r\n    \r\n    try {\r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        console.warn(\"API request failed with status: \" + response.status);\r\n        console.warn(\"Using offline sample data\");\r\n        return filterSampleRecipes(filters);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(\"API response received:\", data);\r\n      return data.results || [];\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      console.warn(\"Using offline sample data\");\r\n      return filterSampleRecipes(filters);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in fetchRecipes:\", error);\r\n    return filterSampleRecipes(filters);\r\n  }\r\n};\r\n\r\nexport const searchRecipes = fetchRecipes;\r\n\r\nexport const fetchRecipeById = async (recipeId) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const url = \"https://api.spoonacular.com/recipes/\" + recipeId + \"/information?apiKey=\" + API_KEY + \"&includeNutrition=true\";\r\n      console.log(\"Fetching recipe details from URL:\", url);\r\n      \r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('GET', url, true);\r\n      xhr.setRequestHeader('Accept', 'application/json');\r\n      \r\n      xhr.onload = function() {\r\n        if (xhr.status >= 200 && xhr.status < 300) {\r\n          try {\r\n            const data = JSON.parse(xhr.responseText);\r\n            resolve(data);\r\n          } catch (error) {\r\n            console.error(\"Error parsing API response:\", error);\r\n            // Try to find in sample data\r\n            const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\r\n            if (recipe) {\r\n              resolve(recipe);\r\n            } else {\r\n              reject(new Error(\"Recipe not found\"));\r\n            }\r\n          }\r\n        } else {\r\n          console.error(\"API request failed with status:\", xhr.status);\r\n          console.error(\"Response text:\", xhr.responseText);\r\n          // Try to find in sample data\r\n          const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\r\n          if (recipe) {\r\n            resolve(recipe);\r\n          } else {\r\n            reject(new Error(\"Recipe not found\"));\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        console.error(\"Network error occurred\");\r\n        // Try to find in sample data\r\n        const recipe = sampleRecipes.find(r => r.id === parseInt(recipeId));\r\n        if (recipe) {\r\n          resolve(recipe);\r\n        } else {\r\n          reject(new Error(\"Recipe not found\"));\r\n        }\r\n      };\r\n      \r\n      xhr.send();\r\n    } catch (error) {\r\n      console.error('Error in fetchRecipeById:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nexport const getRecipeById = fetchRecipeById;\r\n\r\nexport const getSimilarRecipes = async (recipeId) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const url = \"https://api.spoonacular.com/recipes/\" + recipeId + \"/similar?apiKey=\" + API_KEY + \"&number=4\";\r\n      console.log(\"Fetching similar recipes from URL:\", url);\r\n      \r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('GET', url, true);\r\n      xhr.setRequestHeader('Accept', 'application/json');\r\n      \r\n      xhr.onload = function() {\r\n        if (xhr.status >= 200 && xhr.status < 300) {\r\n          try {\r\n            const similarRecipes = JSON.parse(xhr.responseText);\r\n            \r\n            // Get details for each similar recipe\r\n            Promise.all(\r\n              similarRecipes.map(recipe => fetchRecipeById(recipe.id))\r\n            ).then(detailedRecipes => {\r\n              resolve(detailedRecipes);\r\n            }).catch(error => {\r\n              console.error(\"Error fetching detailed recipes:\", error);\r\n              // Return random sample data as fallback\r\n              const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n              resolve(shuffled.slice(0, 4));\r\n            });\r\n          } catch (error) {\r\n            console.error(\"Error parsing API response:\", error);\r\n            // Return random sample data as fallback\r\n            const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n            resolve(shuffled.slice(0, 4));\r\n          }\r\n        } else {\r\n          console.error(\"API request failed with status:\", xhr.status);\r\n          console.error(\"Response text:\", xhr.responseText);\r\n          // Return random sample data as fallback\r\n          const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n          resolve(shuffled.slice(0, 4));\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        console.error(\"Network error occurred\");\r\n        // Return random sample data as fallback\r\n        const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n        resolve(shuffled.slice(0, 4));\r\n      };\r\n      \r\n      xhr.send();\r\n    } catch (error) {\r\n      console.error('Error in getSimilarRecipes:', error);\r\n      // Return random sample data as fallback\r\n      const shuffled = [...sampleRecipes].sort(() => 0.5 - Math.random());\r\n      resolve(shuffled.slice(0, 4));\r\n    }\r\n  });\r\n};\r\n\r\nexport const getRecommendations = async (userProfile) => {\r\n  try {\r\n    // Default parameters if user profile is not available\r\n    let diet = '';\r\n    let intolerances = [];\r\n    let query = '';\r\n    \r\n    // If user profile exists, use it to customize recommendations\r\n    if (userProfile) {\r\n      if (userProfile.goal === 'Weight Loss') {\r\n        diet = 'low-calorie';\r\n      } else if (userProfile.goal === 'Build Muscle') {\r\n        diet = 'high-protein';\r\n      }\r\n      \r\n      intolerances = userProfile.allergies || [];\r\n    }\r\n    \r\n    // Create filters object for fetching recipes\r\n    const filters = {\r\n      query,\r\n      diet,\r\n      intolerances,\r\n      sort: 'popularity',\r\n      maxReadyTime: 60\r\n    };\r\n    \r\n    return await fetchRecipes(filters);\r\n  } catch (error) {\r\n    console.error('Error getting recommendations:', error);\r\n    return filterSampleRecipes({});\r\n  }\r\n};\r\n\r\nexport const saveRecipe = async (userId, recipe) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (!userDoc.exists()) {\r\n      // Create user document if it doesn't exist\r\n      await setDoc(userRef, {\r\n        savedRecipes: [recipe]\r\n      });\r\n    } else {\r\n      // Add recipe to existing savedRecipes array\r\n      await updateDoc(userRef, {\r\n        savedRecipes: arrayUnion(recipe)\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeRecipe = async (userId, recipeId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      const savedRecipes = userDoc.data().savedRecipes || [];\r\n      const recipeToRemove = savedRecipes.find(recipe => recipe.id === recipeId);\r\n      \r\n      if (recipeToRemove) {\r\n        await updateDoc(userRef, {\r\n          savedRecipes: arrayRemove(recipeToRemove)\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error removing recipe:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSavedRecipes = async (userId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      return userDoc.data().savedRecipes || [];\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error getting saved recipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}